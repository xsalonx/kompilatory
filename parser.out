Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instructions -> { instructions }
Rule 7     instructions -> { instructions } instructions
Rule 8     instruction -> expr ;
Rule 9     instruction -> assignment_statement ;
Rule 10    instruction -> if_statement
Rule 11    instruction -> loop
Rule 12    instruction -> BREAK ;
Rule 13    instruction -> CONTINUE ;
Rule 14    instruction -> print_statement ;
Rule 15    instruction -> return_statement ;
Rule 16    expr -> assignable
Rule 17    expr -> FLOATNUM
Rule 18    expr -> INTNUM
Rule 19    expr -> matrix_init_name ( expr )
Rule 20    expr -> [ matrix_init ]
Rule 21    expr -> - expr
Rule 22    expr -> expr '
Rule 23    expr -> expr + expr
Rule 24    expr -> expr - expr
Rule 25    expr -> expr * expr
Rule 26    expr -> expr / expr
Rule 27    expr -> expr DOTADD expr
Rule 28    expr -> expr DOTSUB expr
Rule 29    expr -> expr DOTMUL expr
Rule 30    expr -> expr DOTDIV expr
Rule 31    expr -> expr < expr
Rule 32    expr -> expr > expr
Rule 33    expr -> expr LE expr
Rule 34    expr -> expr GE expr
Rule 35    expr -> expr NE expr
Rule 36    expr -> expr EQ expr
Rule 37    expr -> ( expr )
Rule 38    assignment_statement -> assignable = expr
Rule 39    assignment_statement -> assignable ADDASSIGN expr
Rule 40    assignment_statement -> assignable SUBASSIGN expr
Rule 41    assignment_statement -> assignable MULASSIGN expr
Rule 42    assignment_statement -> assignable DIVASSIGN expr
Rule 43    assignable -> ID
Rule 44    assignable -> matrix_access
Rule 45    matrix_access -> ID [ expr , expr ]
Rule 46    matrix_init -> [ vector ]
Rule 47    matrix_init -> matrix_init , [ vector ]
Rule 48    vector -> expr
Rule 49    vector -> vector , expr
Rule 50    matrix_init_name -> EYE
Rule 51    matrix_init_name -> ZEROS
Rule 52    matrix_init_name -> ONES
Rule 53    if_statement -> IF ( expr ) instructions
Rule 54    if_statement -> IF ( expr ) instructions ELSE instructions
Rule 55    loop -> for_loop
Rule 56    loop -> while_loop
Rule 57    for_loop -> FOR ID = range instructions
Rule 58    while_loop -> WHILE ( expr ) instructions
Rule 59    range -> expr : expr
Rule 60    print_statement -> PRINT printables
Rule 61    printables -> printable
Rule 62    printables -> printables , printable
Rule 63    printable -> STRING
Rule 64    printable -> expr
Rule 65    return_statement -> RETURN
Rule 66    return_statement -> RETURN expr
Rule 67    return_statement -> RETURN STRING

Terminals, with rules where they appear

'                    : 22
(                    : 19 37 53 54 58
)                    : 19 37 53 54 58
*                    : 25
+                    : 23
,                    : 45 47 49 62
-                    : 21 24
/                    : 26
:                    : 59
;                    : 8 9 12 13 14 15
<                    : 31
=                    : 38 57
>                    : 32
ADDASSIGN            : 39
BREAK                : 12
CONTINUE             : 13
DIVASSIGN            : 42
DOTADD               : 27
DOTDIV               : 30
DOTMUL               : 29
DOTSUB               : 28
ELSE                 : 54
EQ                   : 36
EYE                  : 50
FLOATNUM             : 17
FOR                  : 57
GE                   : 34
ID                   : 43 45 57
IF                   : 53 54
INTNUM               : 18
LE                   : 33
MULASSIGN            : 41
NE                   : 35
ONES                 : 52
PRINT                : 60
RETURN               : 65 66 67
STRING               : 63 67
SUBASSIGN            : 40
WHILE                : 58
ZEROS                : 51
[                    : 20 45 46 47
]                    : 20 45 46 47
error                : 
{                    : 6 7
}                    : 6 7

Nonterminals, with rules where they appear

assignable           : 16 38 39 40 41 42
assignment_statement : 9
expr                 : 8 19 21 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 38 39 40 41 42 45 45 48 49 53 54 58 59 59 64 66
for_loop             : 55
if_statement         : 10
instruction          : 4 5
instructions         : 2 4 6 7 7 53 54 54 57 58
instructions_opt     : 1
loop                 : 11
matrix_access        : 44
matrix_init          : 20 47
matrix_init_name     : 19
print_statement      : 14
printable            : 61 62
printables           : 60 62
program              : 0
range                : 57
return_statement     : 15
vector               : 46 47 49
while_loop           : 56

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    $end            reduce using rule 3 (instructions_opt -> .)
    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    instruction                    shift and go to state 33
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 4

    (5) instructions -> instruction .

    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    FLOATNUM        reduce using rule 5 (instructions -> instruction .)
    INTNUM          reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    EYE             reduce using rule 5 (instructions -> instruction .)
    ZEROS           reduce using rule 5 (instructions -> instruction .)
    ONES            reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)
    ELSE            reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instructions -> { . instructions }
    (7) instructions -> { . instructions } instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    instructions                   shift and go to state 34
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 6

    (8) instruction -> expr . ;
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               shift and go to state 35
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 7

    (9) instruction -> assignment_statement . ;

    ;               shift and go to state 51


state 8

    (10) instruction -> if_statement .

    BREAK           reduce using rule 10 (instruction -> if_statement .)
    CONTINUE        reduce using rule 10 (instruction -> if_statement .)
    FLOATNUM        reduce using rule 10 (instruction -> if_statement .)
    INTNUM          reduce using rule 10 (instruction -> if_statement .)
    [               reduce using rule 10 (instruction -> if_statement .)
    -               reduce using rule 10 (instruction -> if_statement .)
    (               reduce using rule 10 (instruction -> if_statement .)
    IF              reduce using rule 10 (instruction -> if_statement .)
    PRINT           reduce using rule 10 (instruction -> if_statement .)
    RETURN          reduce using rule 10 (instruction -> if_statement .)
    ID              reduce using rule 10 (instruction -> if_statement .)
    EYE             reduce using rule 10 (instruction -> if_statement .)
    ZEROS           reduce using rule 10 (instruction -> if_statement .)
    ONES            reduce using rule 10 (instruction -> if_statement .)
    FOR             reduce using rule 10 (instruction -> if_statement .)
    WHILE           reduce using rule 10 (instruction -> if_statement .)
    $end            reduce using rule 10 (instruction -> if_statement .)
    }               reduce using rule 10 (instruction -> if_statement .)
    ELSE            reduce using rule 10 (instruction -> if_statement .)


state 9

    (11) instruction -> loop .

    BREAK           reduce using rule 11 (instruction -> loop .)
    CONTINUE        reduce using rule 11 (instruction -> loop .)
    FLOATNUM        reduce using rule 11 (instruction -> loop .)
    INTNUM          reduce using rule 11 (instruction -> loop .)
    [               reduce using rule 11 (instruction -> loop .)
    -               reduce using rule 11 (instruction -> loop .)
    (               reduce using rule 11 (instruction -> loop .)
    IF              reduce using rule 11 (instruction -> loop .)
    PRINT           reduce using rule 11 (instruction -> loop .)
    RETURN          reduce using rule 11 (instruction -> loop .)
    ID              reduce using rule 11 (instruction -> loop .)
    EYE             reduce using rule 11 (instruction -> loop .)
    ZEROS           reduce using rule 11 (instruction -> loop .)
    ONES            reduce using rule 11 (instruction -> loop .)
    FOR             reduce using rule 11 (instruction -> loop .)
    WHILE           reduce using rule 11 (instruction -> loop .)
    $end            reduce using rule 11 (instruction -> loop .)
    }               reduce using rule 11 (instruction -> loop .)
    ELSE            reduce using rule 11 (instruction -> loop .)


state 10

    (12) instruction -> BREAK . ;

    ;               shift and go to state 52


state 11

    (13) instruction -> CONTINUE . ;

    ;               shift and go to state 53


state 12

    (14) instruction -> print_statement . ;

    ;               shift and go to state 54


state 13

    (15) instruction -> return_statement . ;

    ;               shift and go to state 55


state 14

    (16) expr -> assignable .
    (38) assignment_statement -> assignable . = expr
    (39) assignment_statement -> assignable . ADDASSIGN expr
    (40) assignment_statement -> assignable . SUBASSIGN expr
    (41) assignment_statement -> assignable . MULASSIGN expr
    (42) assignment_statement -> assignable . DIVASSIGN expr

    ;               reduce using rule 16 (expr -> assignable .)
    '               reduce using rule 16 (expr -> assignable .)
    +               reduce using rule 16 (expr -> assignable .)
    -               reduce using rule 16 (expr -> assignable .)
    *               reduce using rule 16 (expr -> assignable .)
    /               reduce using rule 16 (expr -> assignable .)
    DOTADD          reduce using rule 16 (expr -> assignable .)
    DOTSUB          reduce using rule 16 (expr -> assignable .)
    DOTMUL          reduce using rule 16 (expr -> assignable .)
    DOTDIV          reduce using rule 16 (expr -> assignable .)
    <               reduce using rule 16 (expr -> assignable .)
    >               reduce using rule 16 (expr -> assignable .)
    LE              reduce using rule 16 (expr -> assignable .)
    GE              reduce using rule 16 (expr -> assignable .)
    NE              reduce using rule 16 (expr -> assignable .)
    EQ              reduce using rule 16 (expr -> assignable .)
    =               shift and go to state 56
    ADDASSIGN       shift and go to state 57
    SUBASSIGN       shift and go to state 58
    MULASSIGN       shift and go to state 59
    DIVASSIGN       shift and go to state 60


state 15

    (17) expr -> FLOATNUM .

    ;               reduce using rule 17 (expr -> FLOATNUM .)
    '               reduce using rule 17 (expr -> FLOATNUM .)
    +               reduce using rule 17 (expr -> FLOATNUM .)
    -               reduce using rule 17 (expr -> FLOATNUM .)
    *               reduce using rule 17 (expr -> FLOATNUM .)
    /               reduce using rule 17 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 17 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 17 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 17 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 17 (expr -> FLOATNUM .)
    <               reduce using rule 17 (expr -> FLOATNUM .)
    >               reduce using rule 17 (expr -> FLOATNUM .)
    LE              reduce using rule 17 (expr -> FLOATNUM .)
    GE              reduce using rule 17 (expr -> FLOATNUM .)
    NE              reduce using rule 17 (expr -> FLOATNUM .)
    EQ              reduce using rule 17 (expr -> FLOATNUM .)
    )               reduce using rule 17 (expr -> FLOATNUM .)
    ,               reduce using rule 17 (expr -> FLOATNUM .)
    ]               reduce using rule 17 (expr -> FLOATNUM .)
    :               reduce using rule 17 (expr -> FLOATNUM .)
    {               reduce using rule 17 (expr -> FLOATNUM .)
    BREAK           reduce using rule 17 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 17 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 17 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 17 (expr -> FLOATNUM .)
    [               reduce using rule 17 (expr -> FLOATNUM .)
    (               reduce using rule 17 (expr -> FLOATNUM .)
    IF              reduce using rule 17 (expr -> FLOATNUM .)
    PRINT           reduce using rule 17 (expr -> FLOATNUM .)
    RETURN          reduce using rule 17 (expr -> FLOATNUM .)
    ID              reduce using rule 17 (expr -> FLOATNUM .)
    EYE             reduce using rule 17 (expr -> FLOATNUM .)
    ZEROS           reduce using rule 17 (expr -> FLOATNUM .)
    ONES            reduce using rule 17 (expr -> FLOATNUM .)
    FOR             reduce using rule 17 (expr -> FLOATNUM .)
    WHILE           reduce using rule 17 (expr -> FLOATNUM .)


state 16

    (18) expr -> INTNUM .

    ;               reduce using rule 18 (expr -> INTNUM .)
    '               reduce using rule 18 (expr -> INTNUM .)
    +               reduce using rule 18 (expr -> INTNUM .)
    -               reduce using rule 18 (expr -> INTNUM .)
    *               reduce using rule 18 (expr -> INTNUM .)
    /               reduce using rule 18 (expr -> INTNUM .)
    DOTADD          reduce using rule 18 (expr -> INTNUM .)
    DOTSUB          reduce using rule 18 (expr -> INTNUM .)
    DOTMUL          reduce using rule 18 (expr -> INTNUM .)
    DOTDIV          reduce using rule 18 (expr -> INTNUM .)
    <               reduce using rule 18 (expr -> INTNUM .)
    >               reduce using rule 18 (expr -> INTNUM .)
    LE              reduce using rule 18 (expr -> INTNUM .)
    GE              reduce using rule 18 (expr -> INTNUM .)
    NE              reduce using rule 18 (expr -> INTNUM .)
    EQ              reduce using rule 18 (expr -> INTNUM .)
    )               reduce using rule 18 (expr -> INTNUM .)
    ,               reduce using rule 18 (expr -> INTNUM .)
    ]               reduce using rule 18 (expr -> INTNUM .)
    :               reduce using rule 18 (expr -> INTNUM .)
    {               reduce using rule 18 (expr -> INTNUM .)
    BREAK           reduce using rule 18 (expr -> INTNUM .)
    CONTINUE        reduce using rule 18 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 18 (expr -> INTNUM .)
    INTNUM          reduce using rule 18 (expr -> INTNUM .)
    [               reduce using rule 18 (expr -> INTNUM .)
    (               reduce using rule 18 (expr -> INTNUM .)
    IF              reduce using rule 18 (expr -> INTNUM .)
    PRINT           reduce using rule 18 (expr -> INTNUM .)
    RETURN          reduce using rule 18 (expr -> INTNUM .)
    ID              reduce using rule 18 (expr -> INTNUM .)
    EYE             reduce using rule 18 (expr -> INTNUM .)
    ZEROS           reduce using rule 18 (expr -> INTNUM .)
    ONES            reduce using rule 18 (expr -> INTNUM .)
    FOR             reduce using rule 18 (expr -> INTNUM .)
    WHILE           reduce using rule 18 (expr -> INTNUM .)


state 17

    (19) expr -> matrix_init_name . ( expr )

    (               shift and go to state 61


state 18

    (37) expr -> ( . expr )
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 62
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 19

    (20) expr -> [ . matrix_init ]
    (46) matrix_init -> . [ vector ]
    (47) matrix_init -> . matrix_init , [ vector ]

    [               shift and go to state 64

    matrix_init                    shift and go to state 65

state 20

    (21) expr -> - . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 66
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 21

    (53) if_statement -> IF . ( expr ) instructions
    (54) if_statement -> IF . ( expr ) instructions ELSE instructions

    (               shift and go to state 67


state 22

    (55) loop -> for_loop .

    BREAK           reduce using rule 55 (loop -> for_loop .)
    CONTINUE        reduce using rule 55 (loop -> for_loop .)
    FLOATNUM        reduce using rule 55 (loop -> for_loop .)
    INTNUM          reduce using rule 55 (loop -> for_loop .)
    [               reduce using rule 55 (loop -> for_loop .)
    -               reduce using rule 55 (loop -> for_loop .)
    (               reduce using rule 55 (loop -> for_loop .)
    IF              reduce using rule 55 (loop -> for_loop .)
    PRINT           reduce using rule 55 (loop -> for_loop .)
    RETURN          reduce using rule 55 (loop -> for_loop .)
    ID              reduce using rule 55 (loop -> for_loop .)
    EYE             reduce using rule 55 (loop -> for_loop .)
    ZEROS           reduce using rule 55 (loop -> for_loop .)
    ONES            reduce using rule 55 (loop -> for_loop .)
    FOR             reduce using rule 55 (loop -> for_loop .)
    WHILE           reduce using rule 55 (loop -> for_loop .)
    $end            reduce using rule 55 (loop -> for_loop .)
    }               reduce using rule 55 (loop -> for_loop .)
    ELSE            reduce using rule 55 (loop -> for_loop .)


state 23

    (56) loop -> while_loop .

    BREAK           reduce using rule 56 (loop -> while_loop .)
    CONTINUE        reduce using rule 56 (loop -> while_loop .)
    FLOATNUM        reduce using rule 56 (loop -> while_loop .)
    INTNUM          reduce using rule 56 (loop -> while_loop .)
    [               reduce using rule 56 (loop -> while_loop .)
    -               reduce using rule 56 (loop -> while_loop .)
    (               reduce using rule 56 (loop -> while_loop .)
    IF              reduce using rule 56 (loop -> while_loop .)
    PRINT           reduce using rule 56 (loop -> while_loop .)
    RETURN          reduce using rule 56 (loop -> while_loop .)
    ID              reduce using rule 56 (loop -> while_loop .)
    EYE             reduce using rule 56 (loop -> while_loop .)
    ZEROS           reduce using rule 56 (loop -> while_loop .)
    ONES            reduce using rule 56 (loop -> while_loop .)
    FOR             reduce using rule 56 (loop -> while_loop .)
    WHILE           reduce using rule 56 (loop -> while_loop .)
    $end            reduce using rule 56 (loop -> while_loop .)
    }               reduce using rule 56 (loop -> while_loop .)
    ELSE            reduce using rule 56 (loop -> while_loop .)


state 24

    (60) print_statement -> PRINT . printables
    (61) printables -> . printable
    (62) printables -> . printables , printable
    (63) printable -> . STRING
    (64) printable -> . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    STRING          shift and go to state 70
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    printables                     shift and go to state 68
    printable                      shift and go to state 69
    expr                           shift and go to state 71
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 25

    (65) return_statement -> RETURN .
    (66) return_statement -> RETURN . expr
    (67) return_statement -> RETURN . STRING
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    ;               reduce using rule 65 (return_statement -> RETURN .)
    STRING          shift and go to state 73
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 72
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 26

    (43) assignable -> ID .
    (45) matrix_access -> ID . [ expr , expr ]

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 43 (assignable -> ID .)
    ADDASSIGN       reduce using rule 43 (assignable -> ID .)
    SUBASSIGN       reduce using rule 43 (assignable -> ID .)
    MULASSIGN       reduce using rule 43 (assignable -> ID .)
    DIVASSIGN       reduce using rule 43 (assignable -> ID .)
    ;               reduce using rule 43 (assignable -> ID .)
    '               reduce using rule 43 (assignable -> ID .)
    +               reduce using rule 43 (assignable -> ID .)
    -               reduce using rule 43 (assignable -> ID .)
    *               reduce using rule 43 (assignable -> ID .)
    /               reduce using rule 43 (assignable -> ID .)
    DOTADD          reduce using rule 43 (assignable -> ID .)
    DOTSUB          reduce using rule 43 (assignable -> ID .)
    DOTMUL          reduce using rule 43 (assignable -> ID .)
    DOTDIV          reduce using rule 43 (assignable -> ID .)
    <               reduce using rule 43 (assignable -> ID .)
    >               reduce using rule 43 (assignable -> ID .)
    LE              reduce using rule 43 (assignable -> ID .)
    GE              reduce using rule 43 (assignable -> ID .)
    NE              reduce using rule 43 (assignable -> ID .)
    EQ              reduce using rule 43 (assignable -> ID .)
    )               reduce using rule 43 (assignable -> ID .)
    ,               reduce using rule 43 (assignable -> ID .)
    ]               reduce using rule 43 (assignable -> ID .)
    :               reduce using rule 43 (assignable -> ID .)
    {               reduce using rule 43 (assignable -> ID .)
    BREAK           reduce using rule 43 (assignable -> ID .)
    CONTINUE        reduce using rule 43 (assignable -> ID .)
    FLOATNUM        reduce using rule 43 (assignable -> ID .)
    INTNUM          reduce using rule 43 (assignable -> ID .)
    (               reduce using rule 43 (assignable -> ID .)
    IF              reduce using rule 43 (assignable -> ID .)
    PRINT           reduce using rule 43 (assignable -> ID .)
    RETURN          reduce using rule 43 (assignable -> ID .)
    ID              reduce using rule 43 (assignable -> ID .)
    EYE             reduce using rule 43 (assignable -> ID .)
    ZEROS           reduce using rule 43 (assignable -> ID .)
    ONES            reduce using rule 43 (assignable -> ID .)
    FOR             reduce using rule 43 (assignable -> ID .)
    WHILE           reduce using rule 43 (assignable -> ID .)
    [               shift and go to state 74

  ! [               [ reduce using rule 43 (assignable -> ID .) ]


state 27

    (44) assignable -> matrix_access .

    =               reduce using rule 44 (assignable -> matrix_access .)
    ADDASSIGN       reduce using rule 44 (assignable -> matrix_access .)
    SUBASSIGN       reduce using rule 44 (assignable -> matrix_access .)
    MULASSIGN       reduce using rule 44 (assignable -> matrix_access .)
    DIVASSIGN       reduce using rule 44 (assignable -> matrix_access .)
    ;               reduce using rule 44 (assignable -> matrix_access .)
    '               reduce using rule 44 (assignable -> matrix_access .)
    +               reduce using rule 44 (assignable -> matrix_access .)
    -               reduce using rule 44 (assignable -> matrix_access .)
    *               reduce using rule 44 (assignable -> matrix_access .)
    /               reduce using rule 44 (assignable -> matrix_access .)
    DOTADD          reduce using rule 44 (assignable -> matrix_access .)
    DOTSUB          reduce using rule 44 (assignable -> matrix_access .)
    DOTMUL          reduce using rule 44 (assignable -> matrix_access .)
    DOTDIV          reduce using rule 44 (assignable -> matrix_access .)
    <               reduce using rule 44 (assignable -> matrix_access .)
    >               reduce using rule 44 (assignable -> matrix_access .)
    LE              reduce using rule 44 (assignable -> matrix_access .)
    GE              reduce using rule 44 (assignable -> matrix_access .)
    NE              reduce using rule 44 (assignable -> matrix_access .)
    EQ              reduce using rule 44 (assignable -> matrix_access .)
    )               reduce using rule 44 (assignable -> matrix_access .)
    ,               reduce using rule 44 (assignable -> matrix_access .)
    ]               reduce using rule 44 (assignable -> matrix_access .)
    :               reduce using rule 44 (assignable -> matrix_access .)
    {               reduce using rule 44 (assignable -> matrix_access .)
    BREAK           reduce using rule 44 (assignable -> matrix_access .)
    CONTINUE        reduce using rule 44 (assignable -> matrix_access .)
    FLOATNUM        reduce using rule 44 (assignable -> matrix_access .)
    INTNUM          reduce using rule 44 (assignable -> matrix_access .)
    [               reduce using rule 44 (assignable -> matrix_access .)
    (               reduce using rule 44 (assignable -> matrix_access .)
    IF              reduce using rule 44 (assignable -> matrix_access .)
    PRINT           reduce using rule 44 (assignable -> matrix_access .)
    RETURN          reduce using rule 44 (assignable -> matrix_access .)
    ID              reduce using rule 44 (assignable -> matrix_access .)
    EYE             reduce using rule 44 (assignable -> matrix_access .)
    ZEROS           reduce using rule 44 (assignable -> matrix_access .)
    ONES            reduce using rule 44 (assignable -> matrix_access .)
    FOR             reduce using rule 44 (assignable -> matrix_access .)
    WHILE           reduce using rule 44 (assignable -> matrix_access .)


state 28

    (50) matrix_init_name -> EYE .

    (               reduce using rule 50 (matrix_init_name -> EYE .)


state 29

    (51) matrix_init_name -> ZEROS .

    (               reduce using rule 51 (matrix_init_name -> ZEROS .)


state 30

    (52) matrix_init_name -> ONES .

    (               reduce using rule 52 (matrix_init_name -> ONES .)


state 31

    (57) for_loop -> FOR . ID = range instructions

    ID              shift and go to state 75


state 32

    (58) while_loop -> WHILE . ( expr ) instructions

    (               shift and go to state 76


state 33

    (4) instructions -> instructions instruction .

    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 4 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 4 (instructions -> instructions instruction .)
    [               reduce using rule 4 (instructions -> instructions instruction .)
    -               reduce using rule 4 (instructions -> instructions instruction .)
    (               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    EYE             reduce using rule 4 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 4 (instructions -> instructions instruction .)
    ONES            reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)
    ELSE            reduce using rule 4 (instructions -> instructions instruction .)


state 34

    (6) instructions -> { instructions . }
    (7) instructions -> { instructions . } instructions
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    }               shift and go to state 77
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    instruction                    shift and go to state 33
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 35

    (8) instruction -> expr ; .

    BREAK           reduce using rule 8 (instruction -> expr ; .)
    CONTINUE        reduce using rule 8 (instruction -> expr ; .)
    FLOATNUM        reduce using rule 8 (instruction -> expr ; .)
    INTNUM          reduce using rule 8 (instruction -> expr ; .)
    [               reduce using rule 8 (instruction -> expr ; .)
    -               reduce using rule 8 (instruction -> expr ; .)
    (               reduce using rule 8 (instruction -> expr ; .)
    IF              reduce using rule 8 (instruction -> expr ; .)
    PRINT           reduce using rule 8 (instruction -> expr ; .)
    RETURN          reduce using rule 8 (instruction -> expr ; .)
    ID              reduce using rule 8 (instruction -> expr ; .)
    EYE             reduce using rule 8 (instruction -> expr ; .)
    ZEROS           reduce using rule 8 (instruction -> expr ; .)
    ONES            reduce using rule 8 (instruction -> expr ; .)
    FOR             reduce using rule 8 (instruction -> expr ; .)
    WHILE           reduce using rule 8 (instruction -> expr ; .)
    $end            reduce using rule 8 (instruction -> expr ; .)
    }               reduce using rule 8 (instruction -> expr ; .)
    ELSE            reduce using rule 8 (instruction -> expr ; .)


state 36

    (22) expr -> expr ' .

    ;               reduce using rule 22 (expr -> expr ' .)
    '               reduce using rule 22 (expr -> expr ' .)
    +               reduce using rule 22 (expr -> expr ' .)
    -               reduce using rule 22 (expr -> expr ' .)
    *               reduce using rule 22 (expr -> expr ' .)
    /               reduce using rule 22 (expr -> expr ' .)
    DOTADD          reduce using rule 22 (expr -> expr ' .)
    DOTSUB          reduce using rule 22 (expr -> expr ' .)
    DOTMUL          reduce using rule 22 (expr -> expr ' .)
    DOTDIV          reduce using rule 22 (expr -> expr ' .)
    <               reduce using rule 22 (expr -> expr ' .)
    >               reduce using rule 22 (expr -> expr ' .)
    LE              reduce using rule 22 (expr -> expr ' .)
    GE              reduce using rule 22 (expr -> expr ' .)
    NE              reduce using rule 22 (expr -> expr ' .)
    EQ              reduce using rule 22 (expr -> expr ' .)
    )               reduce using rule 22 (expr -> expr ' .)
    ,               reduce using rule 22 (expr -> expr ' .)
    ]               reduce using rule 22 (expr -> expr ' .)
    :               reduce using rule 22 (expr -> expr ' .)
    {               reduce using rule 22 (expr -> expr ' .)
    BREAK           reduce using rule 22 (expr -> expr ' .)
    CONTINUE        reduce using rule 22 (expr -> expr ' .)
    FLOATNUM        reduce using rule 22 (expr -> expr ' .)
    INTNUM          reduce using rule 22 (expr -> expr ' .)
    [               reduce using rule 22 (expr -> expr ' .)
    (               reduce using rule 22 (expr -> expr ' .)
    IF              reduce using rule 22 (expr -> expr ' .)
    PRINT           reduce using rule 22 (expr -> expr ' .)
    RETURN          reduce using rule 22 (expr -> expr ' .)
    ID              reduce using rule 22 (expr -> expr ' .)
    EYE             reduce using rule 22 (expr -> expr ' .)
    ZEROS           reduce using rule 22 (expr -> expr ' .)
    ONES            reduce using rule 22 (expr -> expr ' .)
    FOR             reduce using rule 22 (expr -> expr ' .)
    WHILE           reduce using rule 22 (expr -> expr ' .)


state 37

    (23) expr -> expr + . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 78
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 38

    (24) expr -> expr - . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 79
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 39

    (25) expr -> expr * . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 80
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 40

    (26) expr -> expr / . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 81
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 41

    (27) expr -> expr DOTADD . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 82
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 42

    (28) expr -> expr DOTSUB . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 83
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 43

    (29) expr -> expr DOTMUL . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 84
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 44

    (30) expr -> expr DOTDIV . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 85
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 45

    (31) expr -> expr < . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 86
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 46

    (32) expr -> expr > . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 87
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 47

    (33) expr -> expr LE . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 88
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 48

    (34) expr -> expr GE . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 89
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 49

    (35) expr -> expr NE . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 90
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 50

    (36) expr -> expr EQ . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 91
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 51

    (9) instruction -> assignment_statement ; .

    BREAK           reduce using rule 9 (instruction -> assignment_statement ; .)
    CONTINUE        reduce using rule 9 (instruction -> assignment_statement ; .)
    FLOATNUM        reduce using rule 9 (instruction -> assignment_statement ; .)
    INTNUM          reduce using rule 9 (instruction -> assignment_statement ; .)
    [               reduce using rule 9 (instruction -> assignment_statement ; .)
    -               reduce using rule 9 (instruction -> assignment_statement ; .)
    (               reduce using rule 9 (instruction -> assignment_statement ; .)
    IF              reduce using rule 9 (instruction -> assignment_statement ; .)
    PRINT           reduce using rule 9 (instruction -> assignment_statement ; .)
    RETURN          reduce using rule 9 (instruction -> assignment_statement ; .)
    ID              reduce using rule 9 (instruction -> assignment_statement ; .)
    EYE             reduce using rule 9 (instruction -> assignment_statement ; .)
    ZEROS           reduce using rule 9 (instruction -> assignment_statement ; .)
    ONES            reduce using rule 9 (instruction -> assignment_statement ; .)
    FOR             reduce using rule 9 (instruction -> assignment_statement ; .)
    WHILE           reduce using rule 9 (instruction -> assignment_statement ; .)
    $end            reduce using rule 9 (instruction -> assignment_statement ; .)
    }               reduce using rule 9 (instruction -> assignment_statement ; .)
    ELSE            reduce using rule 9 (instruction -> assignment_statement ; .)


state 52

    (12) instruction -> BREAK ; .

    BREAK           reduce using rule 12 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 12 (instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 12 (instruction -> BREAK ; .)
    INTNUM          reduce using rule 12 (instruction -> BREAK ; .)
    [               reduce using rule 12 (instruction -> BREAK ; .)
    -               reduce using rule 12 (instruction -> BREAK ; .)
    (               reduce using rule 12 (instruction -> BREAK ; .)
    IF              reduce using rule 12 (instruction -> BREAK ; .)
    PRINT           reduce using rule 12 (instruction -> BREAK ; .)
    RETURN          reduce using rule 12 (instruction -> BREAK ; .)
    ID              reduce using rule 12 (instruction -> BREAK ; .)
    EYE             reduce using rule 12 (instruction -> BREAK ; .)
    ZEROS           reduce using rule 12 (instruction -> BREAK ; .)
    ONES            reduce using rule 12 (instruction -> BREAK ; .)
    FOR             reduce using rule 12 (instruction -> BREAK ; .)
    WHILE           reduce using rule 12 (instruction -> BREAK ; .)
    $end            reduce using rule 12 (instruction -> BREAK ; .)
    }               reduce using rule 12 (instruction -> BREAK ; .)
    ELSE            reduce using rule 12 (instruction -> BREAK ; .)


state 53

    (13) instruction -> CONTINUE ; .

    BREAK           reduce using rule 13 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 13 (instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 13 (instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 13 (instruction -> CONTINUE ; .)
    [               reduce using rule 13 (instruction -> CONTINUE ; .)
    -               reduce using rule 13 (instruction -> CONTINUE ; .)
    (               reduce using rule 13 (instruction -> CONTINUE ; .)
    IF              reduce using rule 13 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 13 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 13 (instruction -> CONTINUE ; .)
    ID              reduce using rule 13 (instruction -> CONTINUE ; .)
    EYE             reduce using rule 13 (instruction -> CONTINUE ; .)
    ZEROS           reduce using rule 13 (instruction -> CONTINUE ; .)
    ONES            reduce using rule 13 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 13 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 13 (instruction -> CONTINUE ; .)
    $end            reduce using rule 13 (instruction -> CONTINUE ; .)
    }               reduce using rule 13 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 13 (instruction -> CONTINUE ; .)


state 54

    (14) instruction -> print_statement ; .

    BREAK           reduce using rule 14 (instruction -> print_statement ; .)
    CONTINUE        reduce using rule 14 (instruction -> print_statement ; .)
    FLOATNUM        reduce using rule 14 (instruction -> print_statement ; .)
    INTNUM          reduce using rule 14 (instruction -> print_statement ; .)
    [               reduce using rule 14 (instruction -> print_statement ; .)
    -               reduce using rule 14 (instruction -> print_statement ; .)
    (               reduce using rule 14 (instruction -> print_statement ; .)
    IF              reduce using rule 14 (instruction -> print_statement ; .)
    PRINT           reduce using rule 14 (instruction -> print_statement ; .)
    RETURN          reduce using rule 14 (instruction -> print_statement ; .)
    ID              reduce using rule 14 (instruction -> print_statement ; .)
    EYE             reduce using rule 14 (instruction -> print_statement ; .)
    ZEROS           reduce using rule 14 (instruction -> print_statement ; .)
    ONES            reduce using rule 14 (instruction -> print_statement ; .)
    FOR             reduce using rule 14 (instruction -> print_statement ; .)
    WHILE           reduce using rule 14 (instruction -> print_statement ; .)
    $end            reduce using rule 14 (instruction -> print_statement ; .)
    }               reduce using rule 14 (instruction -> print_statement ; .)
    ELSE            reduce using rule 14 (instruction -> print_statement ; .)


state 55

    (15) instruction -> return_statement ; .

    BREAK           reduce using rule 15 (instruction -> return_statement ; .)
    CONTINUE        reduce using rule 15 (instruction -> return_statement ; .)
    FLOATNUM        reduce using rule 15 (instruction -> return_statement ; .)
    INTNUM          reduce using rule 15 (instruction -> return_statement ; .)
    [               reduce using rule 15 (instruction -> return_statement ; .)
    -               reduce using rule 15 (instruction -> return_statement ; .)
    (               reduce using rule 15 (instruction -> return_statement ; .)
    IF              reduce using rule 15 (instruction -> return_statement ; .)
    PRINT           reduce using rule 15 (instruction -> return_statement ; .)
    RETURN          reduce using rule 15 (instruction -> return_statement ; .)
    ID              reduce using rule 15 (instruction -> return_statement ; .)
    EYE             reduce using rule 15 (instruction -> return_statement ; .)
    ZEROS           reduce using rule 15 (instruction -> return_statement ; .)
    ONES            reduce using rule 15 (instruction -> return_statement ; .)
    FOR             reduce using rule 15 (instruction -> return_statement ; .)
    WHILE           reduce using rule 15 (instruction -> return_statement ; .)
    $end            reduce using rule 15 (instruction -> return_statement ; .)
    }               reduce using rule 15 (instruction -> return_statement ; .)
    ELSE            reduce using rule 15 (instruction -> return_statement ; .)


state 56

    (38) assignment_statement -> assignable = . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    assignable                     shift and go to state 63
    expr                           shift and go to state 92
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 57

    (39) assignment_statement -> assignable ADDASSIGN . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    assignable                     shift and go to state 63
    expr                           shift and go to state 93
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 58

    (40) assignment_statement -> assignable SUBASSIGN . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    assignable                     shift and go to state 63
    expr                           shift and go to state 94
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 59

    (41) assignment_statement -> assignable MULASSIGN . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    assignable                     shift and go to state 63
    expr                           shift and go to state 95
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 60

    (42) assignment_statement -> assignable DIVASSIGN . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    assignable                     shift and go to state 63
    expr                           shift and go to state 96
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 61

    (19) expr -> matrix_init_name ( . expr )
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    matrix_init_name               shift and go to state 17
    expr                           shift and go to state 97
    assignable                     shift and go to state 63
    matrix_access                  shift and go to state 27

state 62

    (37) expr -> ( expr . )
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    )               shift and go to state 98
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 63

    (16) expr -> assignable .

    )               reduce using rule 16 (expr -> assignable .)
    '               reduce using rule 16 (expr -> assignable .)
    +               reduce using rule 16 (expr -> assignable .)
    -               reduce using rule 16 (expr -> assignable .)
    *               reduce using rule 16 (expr -> assignable .)
    /               reduce using rule 16 (expr -> assignable .)
    DOTADD          reduce using rule 16 (expr -> assignable .)
    DOTSUB          reduce using rule 16 (expr -> assignable .)
    DOTMUL          reduce using rule 16 (expr -> assignable .)
    DOTDIV          reduce using rule 16 (expr -> assignable .)
    <               reduce using rule 16 (expr -> assignable .)
    >               reduce using rule 16 (expr -> assignable .)
    LE              reduce using rule 16 (expr -> assignable .)
    GE              reduce using rule 16 (expr -> assignable .)
    NE              reduce using rule 16 (expr -> assignable .)
    EQ              reduce using rule 16 (expr -> assignable .)
    ;               reduce using rule 16 (expr -> assignable .)
    ,               reduce using rule 16 (expr -> assignable .)
    ]               reduce using rule 16 (expr -> assignable .)
    :               reduce using rule 16 (expr -> assignable .)
    {               reduce using rule 16 (expr -> assignable .)
    BREAK           reduce using rule 16 (expr -> assignable .)
    CONTINUE        reduce using rule 16 (expr -> assignable .)
    FLOATNUM        reduce using rule 16 (expr -> assignable .)
    INTNUM          reduce using rule 16 (expr -> assignable .)
    [               reduce using rule 16 (expr -> assignable .)
    (               reduce using rule 16 (expr -> assignable .)
    IF              reduce using rule 16 (expr -> assignable .)
    PRINT           reduce using rule 16 (expr -> assignable .)
    RETURN          reduce using rule 16 (expr -> assignable .)
    ID              reduce using rule 16 (expr -> assignable .)
    EYE             reduce using rule 16 (expr -> assignable .)
    ZEROS           reduce using rule 16 (expr -> assignable .)
    ONES            reduce using rule 16 (expr -> assignable .)
    FOR             reduce using rule 16 (expr -> assignable .)
    WHILE           reduce using rule 16 (expr -> assignable .)


state 64

    (46) matrix_init -> [ . vector ]
    (48) vector -> . expr
    (49) vector -> . vector , expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    vector                         shift and go to state 99
    expr                           shift and go to state 100
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 65

    (20) expr -> [ matrix_init . ]
    (47) matrix_init -> matrix_init . , [ vector ]

    ]               shift and go to state 101
    ,               shift and go to state 102


state 66

    (21) expr -> - expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 21 (expr -> - expr .)
    '               reduce using rule 21 (expr -> - expr .)
    +               reduce using rule 21 (expr -> - expr .)
    -               reduce using rule 21 (expr -> - expr .)
    *               reduce using rule 21 (expr -> - expr .)
    /               reduce using rule 21 (expr -> - expr .)
    DOTADD          reduce using rule 21 (expr -> - expr .)
    DOTSUB          reduce using rule 21 (expr -> - expr .)
    DOTMUL          reduce using rule 21 (expr -> - expr .)
    DOTDIV          reduce using rule 21 (expr -> - expr .)
    <               reduce using rule 21 (expr -> - expr .)
    >               reduce using rule 21 (expr -> - expr .)
    LE              reduce using rule 21 (expr -> - expr .)
    GE              reduce using rule 21 (expr -> - expr .)
    NE              reduce using rule 21 (expr -> - expr .)
    EQ              reduce using rule 21 (expr -> - expr .)
    )               reduce using rule 21 (expr -> - expr .)
    ,               reduce using rule 21 (expr -> - expr .)
    ]               reduce using rule 21 (expr -> - expr .)
    :               reduce using rule 21 (expr -> - expr .)
    {               reduce using rule 21 (expr -> - expr .)
    BREAK           reduce using rule 21 (expr -> - expr .)
    CONTINUE        reduce using rule 21 (expr -> - expr .)
    FLOATNUM        reduce using rule 21 (expr -> - expr .)
    INTNUM          reduce using rule 21 (expr -> - expr .)
    [               reduce using rule 21 (expr -> - expr .)
    (               reduce using rule 21 (expr -> - expr .)
    IF              reduce using rule 21 (expr -> - expr .)
    PRINT           reduce using rule 21 (expr -> - expr .)
    RETURN          reduce using rule 21 (expr -> - expr .)
    ID              reduce using rule 21 (expr -> - expr .)
    EYE             reduce using rule 21 (expr -> - expr .)
    ZEROS           reduce using rule 21 (expr -> - expr .)
    ONES            reduce using rule 21 (expr -> - expr .)
    FOR             reduce using rule 21 (expr -> - expr .)
    WHILE           reduce using rule 21 (expr -> - expr .)

  ! '               [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 67

    (53) if_statement -> IF ( . expr ) instructions
    (54) if_statement -> IF ( . expr ) instructions ELSE instructions
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 103
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 68

    (60) print_statement -> PRINT printables .
    (62) printables -> printables . , printable

    ;               reduce using rule 60 (print_statement -> PRINT printables .)
    ,               shift and go to state 104


state 69

    (61) printables -> printable .

    ,               reduce using rule 61 (printables -> printable .)
    ;               reduce using rule 61 (printables -> printable .)


state 70

    (63) printable -> STRING .

    ,               reduce using rule 63 (printable -> STRING .)
    ;               reduce using rule 63 (printable -> STRING .)


state 71

    (64) printable -> expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ,               reduce using rule 64 (printable -> expr .)
    ;               reduce using rule 64 (printable -> expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 72

    (66) return_statement -> RETURN expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 66 (return_statement -> RETURN expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 73

    (67) return_statement -> RETURN STRING .

    ;               reduce using rule 67 (return_statement -> RETURN STRING .)


state 74

    (45) matrix_access -> ID [ . expr , expr ]
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 105
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 75

    (57) for_loop -> FOR ID . = range instructions

    =               shift and go to state 106


state 76

    (58) while_loop -> WHILE ( . expr ) instructions
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 107
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 77

    (6) instructions -> { instructions } .
    (7) instructions -> { instructions } . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FLOATNUM resolved as shift
  ! shift/reduce conflict for INTNUM resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EYE resolved as shift
  ! shift/reduce conflict for ZEROS resolved as shift
  ! shift/reduce conflict for ONES resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 6 (instructions -> { instructions } .)
    }               reduce using rule 6 (instructions -> { instructions } .)
    ELSE            reduce using rule 6 (instructions -> { instructions } .)
    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

  ! BREAK           [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! CONTINUE        [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! FLOATNUM        [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! INTNUM          [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! [               [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! -               [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! (               [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! IF              [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! PRINT           [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! RETURN          [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! ID              [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! EYE             [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! ZEROS           [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! ONES            [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! FOR             [ reduce using rule 6 (instructions -> { instructions } .) ]
  ! WHILE           [ reduce using rule 6 (instructions -> { instructions } .) ]

    instructions                   shift and go to state 108
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 78

    (23) expr -> expr + expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 23 (expr -> expr + expr .)
    +               reduce using rule 23 (expr -> expr + expr .)
    -               reduce using rule 23 (expr -> expr + expr .)
    <               reduce using rule 23 (expr -> expr + expr .)
    >               reduce using rule 23 (expr -> expr + expr .)
    LE              reduce using rule 23 (expr -> expr + expr .)
    GE              reduce using rule 23 (expr -> expr + expr .)
    NE              reduce using rule 23 (expr -> expr + expr .)
    EQ              reduce using rule 23 (expr -> expr + expr .)
    )               reduce using rule 23 (expr -> expr + expr .)
    ,               reduce using rule 23 (expr -> expr + expr .)
    ]               reduce using rule 23 (expr -> expr + expr .)
    :               reduce using rule 23 (expr -> expr + expr .)
    {               reduce using rule 23 (expr -> expr + expr .)
    BREAK           reduce using rule 23 (expr -> expr + expr .)
    CONTINUE        reduce using rule 23 (expr -> expr + expr .)
    FLOATNUM        reduce using rule 23 (expr -> expr + expr .)
    INTNUM          reduce using rule 23 (expr -> expr + expr .)
    [               reduce using rule 23 (expr -> expr + expr .)
    (               reduce using rule 23 (expr -> expr + expr .)
    IF              reduce using rule 23 (expr -> expr + expr .)
    PRINT           reduce using rule 23 (expr -> expr + expr .)
    RETURN          reduce using rule 23 (expr -> expr + expr .)
    ID              reduce using rule 23 (expr -> expr + expr .)
    EYE             reduce using rule 23 (expr -> expr + expr .)
    ZEROS           reduce using rule 23 (expr -> expr + expr .)
    ONES            reduce using rule 23 (expr -> expr + expr .)
    FOR             reduce using rule 23 (expr -> expr + expr .)
    WHILE           reduce using rule 23 (expr -> expr + expr .)
    '               shift and go to state 36
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 23 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 23 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 23 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 23 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 23 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 23 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 23 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 79

    (24) expr -> expr - expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 24 (expr -> expr - expr .)
    +               reduce using rule 24 (expr -> expr - expr .)
    -               reduce using rule 24 (expr -> expr - expr .)
    <               reduce using rule 24 (expr -> expr - expr .)
    >               reduce using rule 24 (expr -> expr - expr .)
    LE              reduce using rule 24 (expr -> expr - expr .)
    GE              reduce using rule 24 (expr -> expr - expr .)
    NE              reduce using rule 24 (expr -> expr - expr .)
    EQ              reduce using rule 24 (expr -> expr - expr .)
    )               reduce using rule 24 (expr -> expr - expr .)
    ,               reduce using rule 24 (expr -> expr - expr .)
    ]               reduce using rule 24 (expr -> expr - expr .)
    :               reduce using rule 24 (expr -> expr - expr .)
    {               reduce using rule 24 (expr -> expr - expr .)
    BREAK           reduce using rule 24 (expr -> expr - expr .)
    CONTINUE        reduce using rule 24 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 24 (expr -> expr - expr .)
    INTNUM          reduce using rule 24 (expr -> expr - expr .)
    [               reduce using rule 24 (expr -> expr - expr .)
    (               reduce using rule 24 (expr -> expr - expr .)
    IF              reduce using rule 24 (expr -> expr - expr .)
    PRINT           reduce using rule 24 (expr -> expr - expr .)
    RETURN          reduce using rule 24 (expr -> expr - expr .)
    ID              reduce using rule 24 (expr -> expr - expr .)
    EYE             reduce using rule 24 (expr -> expr - expr .)
    ZEROS           reduce using rule 24 (expr -> expr - expr .)
    ONES            reduce using rule 24 (expr -> expr - expr .)
    FOR             reduce using rule 24 (expr -> expr - expr .)
    WHILE           reduce using rule 24 (expr -> expr - expr .)
    '               shift and go to state 36
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 24 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 24 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 24 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 24 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 24 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 24 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 24 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 80

    (25) expr -> expr * expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 25 (expr -> expr * expr .)
    +               reduce using rule 25 (expr -> expr * expr .)
    -               reduce using rule 25 (expr -> expr * expr .)
    *               reduce using rule 25 (expr -> expr * expr .)
    /               reduce using rule 25 (expr -> expr * expr .)
    <               reduce using rule 25 (expr -> expr * expr .)
    >               reduce using rule 25 (expr -> expr * expr .)
    LE              reduce using rule 25 (expr -> expr * expr .)
    GE              reduce using rule 25 (expr -> expr * expr .)
    NE              reduce using rule 25 (expr -> expr * expr .)
    EQ              reduce using rule 25 (expr -> expr * expr .)
    )               reduce using rule 25 (expr -> expr * expr .)
    ,               reduce using rule 25 (expr -> expr * expr .)
    ]               reduce using rule 25 (expr -> expr * expr .)
    :               reduce using rule 25 (expr -> expr * expr .)
    {               reduce using rule 25 (expr -> expr * expr .)
    BREAK           reduce using rule 25 (expr -> expr * expr .)
    CONTINUE        reduce using rule 25 (expr -> expr * expr .)
    FLOATNUM        reduce using rule 25 (expr -> expr * expr .)
    INTNUM          reduce using rule 25 (expr -> expr * expr .)
    [               reduce using rule 25 (expr -> expr * expr .)
    (               reduce using rule 25 (expr -> expr * expr .)
    IF              reduce using rule 25 (expr -> expr * expr .)
    PRINT           reduce using rule 25 (expr -> expr * expr .)
    RETURN          reduce using rule 25 (expr -> expr * expr .)
    ID              reduce using rule 25 (expr -> expr * expr .)
    EYE             reduce using rule 25 (expr -> expr * expr .)
    ZEROS           reduce using rule 25 (expr -> expr * expr .)
    ONES            reduce using rule 25 (expr -> expr * expr .)
    FOR             reduce using rule 25 (expr -> expr * expr .)
    WHILE           reduce using rule 25 (expr -> expr * expr .)
    '               shift and go to state 36
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 25 (expr -> expr * expr .) ]
  ! DOTADD          [ reduce using rule 25 (expr -> expr * expr .) ]
  ! DOTSUB          [ reduce using rule 25 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 25 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 25 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 81

    (26) expr -> expr / expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 26 (expr -> expr / expr .)
    +               reduce using rule 26 (expr -> expr / expr .)
    -               reduce using rule 26 (expr -> expr / expr .)
    *               reduce using rule 26 (expr -> expr / expr .)
    /               reduce using rule 26 (expr -> expr / expr .)
    <               reduce using rule 26 (expr -> expr / expr .)
    >               reduce using rule 26 (expr -> expr / expr .)
    LE              reduce using rule 26 (expr -> expr / expr .)
    GE              reduce using rule 26 (expr -> expr / expr .)
    NE              reduce using rule 26 (expr -> expr / expr .)
    EQ              reduce using rule 26 (expr -> expr / expr .)
    )               reduce using rule 26 (expr -> expr / expr .)
    ,               reduce using rule 26 (expr -> expr / expr .)
    ]               reduce using rule 26 (expr -> expr / expr .)
    :               reduce using rule 26 (expr -> expr / expr .)
    {               reduce using rule 26 (expr -> expr / expr .)
    BREAK           reduce using rule 26 (expr -> expr / expr .)
    CONTINUE        reduce using rule 26 (expr -> expr / expr .)
    FLOATNUM        reduce using rule 26 (expr -> expr / expr .)
    INTNUM          reduce using rule 26 (expr -> expr / expr .)
    [               reduce using rule 26 (expr -> expr / expr .)
    (               reduce using rule 26 (expr -> expr / expr .)
    IF              reduce using rule 26 (expr -> expr / expr .)
    PRINT           reduce using rule 26 (expr -> expr / expr .)
    RETURN          reduce using rule 26 (expr -> expr / expr .)
    ID              reduce using rule 26 (expr -> expr / expr .)
    EYE             reduce using rule 26 (expr -> expr / expr .)
    ZEROS           reduce using rule 26 (expr -> expr / expr .)
    ONES            reduce using rule 26 (expr -> expr / expr .)
    FOR             reduce using rule 26 (expr -> expr / expr .)
    WHILE           reduce using rule 26 (expr -> expr / expr .)
    '               shift and go to state 36
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 26 (expr -> expr / expr .) ]
  ! DOTADD          [ reduce using rule 26 (expr -> expr / expr .) ]
  ! DOTSUB          [ reduce using rule 26 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 26 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 26 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 82

    (27) expr -> expr DOTADD expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 27 (expr -> expr DOTADD expr .)
    +               reduce using rule 27 (expr -> expr DOTADD expr .)
    -               reduce using rule 27 (expr -> expr DOTADD expr .)
    *               reduce using rule 27 (expr -> expr DOTADD expr .)
    /               reduce using rule 27 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 27 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 27 (expr -> expr DOTADD expr .)
    <               reduce using rule 27 (expr -> expr DOTADD expr .)
    >               reduce using rule 27 (expr -> expr DOTADD expr .)
    LE              reduce using rule 27 (expr -> expr DOTADD expr .)
    GE              reduce using rule 27 (expr -> expr DOTADD expr .)
    NE              reduce using rule 27 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 27 (expr -> expr DOTADD expr .)
    )               reduce using rule 27 (expr -> expr DOTADD expr .)
    ,               reduce using rule 27 (expr -> expr DOTADD expr .)
    ]               reduce using rule 27 (expr -> expr DOTADD expr .)
    :               reduce using rule 27 (expr -> expr DOTADD expr .)
    {               reduce using rule 27 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 27 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 27 (expr -> expr DOTADD expr .)
    FLOATNUM        reduce using rule 27 (expr -> expr DOTADD expr .)
    INTNUM          reduce using rule 27 (expr -> expr DOTADD expr .)
    [               reduce using rule 27 (expr -> expr DOTADD expr .)
    (               reduce using rule 27 (expr -> expr DOTADD expr .)
    IF              reduce using rule 27 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 27 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 27 (expr -> expr DOTADD expr .)
    ID              reduce using rule 27 (expr -> expr DOTADD expr .)
    EYE             reduce using rule 27 (expr -> expr DOTADD expr .)
    ZEROS           reduce using rule 27 (expr -> expr DOTADD expr .)
    ONES            reduce using rule 27 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 27 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 27 (expr -> expr DOTADD expr .)
    '               shift and go to state 36
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 27 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 27 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 27 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 83

    (28) expr -> expr DOTSUB expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 28 (expr -> expr DOTSUB expr .)
    +               reduce using rule 28 (expr -> expr DOTSUB expr .)
    -               reduce using rule 28 (expr -> expr DOTSUB expr .)
    *               reduce using rule 28 (expr -> expr DOTSUB expr .)
    /               reduce using rule 28 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 28 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 28 (expr -> expr DOTSUB expr .)
    <               reduce using rule 28 (expr -> expr DOTSUB expr .)
    >               reduce using rule 28 (expr -> expr DOTSUB expr .)
    LE              reduce using rule 28 (expr -> expr DOTSUB expr .)
    GE              reduce using rule 28 (expr -> expr DOTSUB expr .)
    NE              reduce using rule 28 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 28 (expr -> expr DOTSUB expr .)
    )               reduce using rule 28 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 28 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 28 (expr -> expr DOTSUB expr .)
    :               reduce using rule 28 (expr -> expr DOTSUB expr .)
    {               reduce using rule 28 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 28 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 28 (expr -> expr DOTSUB expr .)
    FLOATNUM        reduce using rule 28 (expr -> expr DOTSUB expr .)
    INTNUM          reduce using rule 28 (expr -> expr DOTSUB expr .)
    [               reduce using rule 28 (expr -> expr DOTSUB expr .)
    (               reduce using rule 28 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 28 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 28 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 28 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 28 (expr -> expr DOTSUB expr .)
    EYE             reduce using rule 28 (expr -> expr DOTSUB expr .)
    ZEROS           reduce using rule 28 (expr -> expr DOTSUB expr .)
    ONES            reduce using rule 28 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 28 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 28 (expr -> expr DOTSUB expr .)
    '               shift and go to state 36
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 28 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 28 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 28 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 84

    (29) expr -> expr DOTMUL expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 29 (expr -> expr DOTMUL expr .)
    +               reduce using rule 29 (expr -> expr DOTMUL expr .)
    -               reduce using rule 29 (expr -> expr DOTMUL expr .)
    *               reduce using rule 29 (expr -> expr DOTMUL expr .)
    /               reduce using rule 29 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 29 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 29 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 29 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 29 (expr -> expr DOTMUL expr .)
    <               reduce using rule 29 (expr -> expr DOTMUL expr .)
    >               reduce using rule 29 (expr -> expr DOTMUL expr .)
    LE              reduce using rule 29 (expr -> expr DOTMUL expr .)
    GE              reduce using rule 29 (expr -> expr DOTMUL expr .)
    NE              reduce using rule 29 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 29 (expr -> expr DOTMUL expr .)
    )               reduce using rule 29 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 29 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 29 (expr -> expr DOTMUL expr .)
    :               reduce using rule 29 (expr -> expr DOTMUL expr .)
    {               reduce using rule 29 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 29 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 29 (expr -> expr DOTMUL expr .)
    FLOATNUM        reduce using rule 29 (expr -> expr DOTMUL expr .)
    INTNUM          reduce using rule 29 (expr -> expr DOTMUL expr .)
    [               reduce using rule 29 (expr -> expr DOTMUL expr .)
    (               reduce using rule 29 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 29 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 29 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 29 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 29 (expr -> expr DOTMUL expr .)
    EYE             reduce using rule 29 (expr -> expr DOTMUL expr .)
    ZEROS           reduce using rule 29 (expr -> expr DOTMUL expr .)
    ONES            reduce using rule 29 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 29 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 29 (expr -> expr DOTMUL expr .)
    '               shift and go to state 36

  ! '               [ reduce using rule 29 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 85

    (30) expr -> expr DOTDIV expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 30 (expr -> expr DOTDIV expr .)
    +               reduce using rule 30 (expr -> expr DOTDIV expr .)
    -               reduce using rule 30 (expr -> expr DOTDIV expr .)
    *               reduce using rule 30 (expr -> expr DOTDIV expr .)
    /               reduce using rule 30 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 30 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 30 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 30 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 30 (expr -> expr DOTDIV expr .)
    <               reduce using rule 30 (expr -> expr DOTDIV expr .)
    >               reduce using rule 30 (expr -> expr DOTDIV expr .)
    LE              reduce using rule 30 (expr -> expr DOTDIV expr .)
    GE              reduce using rule 30 (expr -> expr DOTDIV expr .)
    NE              reduce using rule 30 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 30 (expr -> expr DOTDIV expr .)
    )               reduce using rule 30 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 30 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 30 (expr -> expr DOTDIV expr .)
    :               reduce using rule 30 (expr -> expr DOTDIV expr .)
    {               reduce using rule 30 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 30 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 30 (expr -> expr DOTDIV expr .)
    FLOATNUM        reduce using rule 30 (expr -> expr DOTDIV expr .)
    INTNUM          reduce using rule 30 (expr -> expr DOTDIV expr .)
    [               reduce using rule 30 (expr -> expr DOTDIV expr .)
    (               reduce using rule 30 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 30 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 30 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 30 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 30 (expr -> expr DOTDIV expr .)
    EYE             reduce using rule 30 (expr -> expr DOTDIV expr .)
    ZEROS           reduce using rule 30 (expr -> expr DOTDIV expr .)
    ONES            reduce using rule 30 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 30 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 30 (expr -> expr DOTDIV expr .)
    '               shift and go to state 36

  ! '               [ reduce using rule 30 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 86

    (31) expr -> expr < expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 31 (expr -> expr < expr .)
    <               reduce using rule 31 (expr -> expr < expr .)
    >               reduce using rule 31 (expr -> expr < expr .)
    LE              reduce using rule 31 (expr -> expr < expr .)
    GE              reduce using rule 31 (expr -> expr < expr .)
    NE              reduce using rule 31 (expr -> expr < expr .)
    EQ              reduce using rule 31 (expr -> expr < expr .)
    )               reduce using rule 31 (expr -> expr < expr .)
    ,               reduce using rule 31 (expr -> expr < expr .)
    ]               reduce using rule 31 (expr -> expr < expr .)
    :               reduce using rule 31 (expr -> expr < expr .)
    {               reduce using rule 31 (expr -> expr < expr .)
    BREAK           reduce using rule 31 (expr -> expr < expr .)
    CONTINUE        reduce using rule 31 (expr -> expr < expr .)
    FLOATNUM        reduce using rule 31 (expr -> expr < expr .)
    INTNUM          reduce using rule 31 (expr -> expr < expr .)
    [               reduce using rule 31 (expr -> expr < expr .)
    (               reduce using rule 31 (expr -> expr < expr .)
    IF              reduce using rule 31 (expr -> expr < expr .)
    PRINT           reduce using rule 31 (expr -> expr < expr .)
    RETURN          reduce using rule 31 (expr -> expr < expr .)
    ID              reduce using rule 31 (expr -> expr < expr .)
    EYE             reduce using rule 31 (expr -> expr < expr .)
    ZEROS           reduce using rule 31 (expr -> expr < expr .)
    ONES            reduce using rule 31 (expr -> expr < expr .)
    FOR             reduce using rule 31 (expr -> expr < expr .)
    WHILE           reduce using rule 31 (expr -> expr < expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 31 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 31 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 31 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 31 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 31 (expr -> expr < expr .) ]
  ! DOTADD          [ reduce using rule 31 (expr -> expr < expr .) ]
  ! DOTSUB          [ reduce using rule 31 (expr -> expr < expr .) ]
  ! DOTMUL          [ reduce using rule 31 (expr -> expr < expr .) ]
  ! DOTDIV          [ reduce using rule 31 (expr -> expr < expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 87

    (32) expr -> expr > expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 32 (expr -> expr > expr .)
    <               reduce using rule 32 (expr -> expr > expr .)
    >               reduce using rule 32 (expr -> expr > expr .)
    LE              reduce using rule 32 (expr -> expr > expr .)
    GE              reduce using rule 32 (expr -> expr > expr .)
    NE              reduce using rule 32 (expr -> expr > expr .)
    EQ              reduce using rule 32 (expr -> expr > expr .)
    )               reduce using rule 32 (expr -> expr > expr .)
    ,               reduce using rule 32 (expr -> expr > expr .)
    ]               reduce using rule 32 (expr -> expr > expr .)
    :               reduce using rule 32 (expr -> expr > expr .)
    {               reduce using rule 32 (expr -> expr > expr .)
    BREAK           reduce using rule 32 (expr -> expr > expr .)
    CONTINUE        reduce using rule 32 (expr -> expr > expr .)
    FLOATNUM        reduce using rule 32 (expr -> expr > expr .)
    INTNUM          reduce using rule 32 (expr -> expr > expr .)
    [               reduce using rule 32 (expr -> expr > expr .)
    (               reduce using rule 32 (expr -> expr > expr .)
    IF              reduce using rule 32 (expr -> expr > expr .)
    PRINT           reduce using rule 32 (expr -> expr > expr .)
    RETURN          reduce using rule 32 (expr -> expr > expr .)
    ID              reduce using rule 32 (expr -> expr > expr .)
    EYE             reduce using rule 32 (expr -> expr > expr .)
    ZEROS           reduce using rule 32 (expr -> expr > expr .)
    ONES            reduce using rule 32 (expr -> expr > expr .)
    FOR             reduce using rule 32 (expr -> expr > expr .)
    WHILE           reduce using rule 32 (expr -> expr > expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 32 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 32 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 32 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 32 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 32 (expr -> expr > expr .) ]
  ! DOTADD          [ reduce using rule 32 (expr -> expr > expr .) ]
  ! DOTSUB          [ reduce using rule 32 (expr -> expr > expr .) ]
  ! DOTMUL          [ reduce using rule 32 (expr -> expr > expr .) ]
  ! DOTDIV          [ reduce using rule 32 (expr -> expr > expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 88

    (33) expr -> expr LE expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 33 (expr -> expr LE expr .)
    <               reduce using rule 33 (expr -> expr LE expr .)
    >               reduce using rule 33 (expr -> expr LE expr .)
    LE              reduce using rule 33 (expr -> expr LE expr .)
    GE              reduce using rule 33 (expr -> expr LE expr .)
    NE              reduce using rule 33 (expr -> expr LE expr .)
    EQ              reduce using rule 33 (expr -> expr LE expr .)
    )               reduce using rule 33 (expr -> expr LE expr .)
    ,               reduce using rule 33 (expr -> expr LE expr .)
    ]               reduce using rule 33 (expr -> expr LE expr .)
    :               reduce using rule 33 (expr -> expr LE expr .)
    {               reduce using rule 33 (expr -> expr LE expr .)
    BREAK           reduce using rule 33 (expr -> expr LE expr .)
    CONTINUE        reduce using rule 33 (expr -> expr LE expr .)
    FLOATNUM        reduce using rule 33 (expr -> expr LE expr .)
    INTNUM          reduce using rule 33 (expr -> expr LE expr .)
    [               reduce using rule 33 (expr -> expr LE expr .)
    (               reduce using rule 33 (expr -> expr LE expr .)
    IF              reduce using rule 33 (expr -> expr LE expr .)
    PRINT           reduce using rule 33 (expr -> expr LE expr .)
    RETURN          reduce using rule 33 (expr -> expr LE expr .)
    ID              reduce using rule 33 (expr -> expr LE expr .)
    EYE             reduce using rule 33 (expr -> expr LE expr .)
    ZEROS           reduce using rule 33 (expr -> expr LE expr .)
    ONES            reduce using rule 33 (expr -> expr LE expr .)
    FOR             reduce using rule 33 (expr -> expr LE expr .)
    WHILE           reduce using rule 33 (expr -> expr LE expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! +               [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! -               [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! *               [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! /               [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! DOTADD          [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! DOTSUB          [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! DOTMUL          [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! DOTDIV          [ reduce using rule 33 (expr -> expr LE expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 89

    (34) expr -> expr GE expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 34 (expr -> expr GE expr .)
    <               reduce using rule 34 (expr -> expr GE expr .)
    >               reduce using rule 34 (expr -> expr GE expr .)
    LE              reduce using rule 34 (expr -> expr GE expr .)
    GE              reduce using rule 34 (expr -> expr GE expr .)
    NE              reduce using rule 34 (expr -> expr GE expr .)
    EQ              reduce using rule 34 (expr -> expr GE expr .)
    )               reduce using rule 34 (expr -> expr GE expr .)
    ,               reduce using rule 34 (expr -> expr GE expr .)
    ]               reduce using rule 34 (expr -> expr GE expr .)
    :               reduce using rule 34 (expr -> expr GE expr .)
    {               reduce using rule 34 (expr -> expr GE expr .)
    BREAK           reduce using rule 34 (expr -> expr GE expr .)
    CONTINUE        reduce using rule 34 (expr -> expr GE expr .)
    FLOATNUM        reduce using rule 34 (expr -> expr GE expr .)
    INTNUM          reduce using rule 34 (expr -> expr GE expr .)
    [               reduce using rule 34 (expr -> expr GE expr .)
    (               reduce using rule 34 (expr -> expr GE expr .)
    IF              reduce using rule 34 (expr -> expr GE expr .)
    PRINT           reduce using rule 34 (expr -> expr GE expr .)
    RETURN          reduce using rule 34 (expr -> expr GE expr .)
    ID              reduce using rule 34 (expr -> expr GE expr .)
    EYE             reduce using rule 34 (expr -> expr GE expr .)
    ZEROS           reduce using rule 34 (expr -> expr GE expr .)
    ONES            reduce using rule 34 (expr -> expr GE expr .)
    FOR             reduce using rule 34 (expr -> expr GE expr .)
    WHILE           reduce using rule 34 (expr -> expr GE expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! +               [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! -               [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! *               [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! /               [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! DOTADD          [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! DOTSUB          [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! DOTMUL          [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! DOTDIV          [ reduce using rule 34 (expr -> expr GE expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 90

    (35) expr -> expr NE expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 35 (expr -> expr NE expr .)
    <               reduce using rule 35 (expr -> expr NE expr .)
    >               reduce using rule 35 (expr -> expr NE expr .)
    LE              reduce using rule 35 (expr -> expr NE expr .)
    GE              reduce using rule 35 (expr -> expr NE expr .)
    NE              reduce using rule 35 (expr -> expr NE expr .)
    EQ              reduce using rule 35 (expr -> expr NE expr .)
    )               reduce using rule 35 (expr -> expr NE expr .)
    ,               reduce using rule 35 (expr -> expr NE expr .)
    ]               reduce using rule 35 (expr -> expr NE expr .)
    :               reduce using rule 35 (expr -> expr NE expr .)
    {               reduce using rule 35 (expr -> expr NE expr .)
    BREAK           reduce using rule 35 (expr -> expr NE expr .)
    CONTINUE        reduce using rule 35 (expr -> expr NE expr .)
    FLOATNUM        reduce using rule 35 (expr -> expr NE expr .)
    INTNUM          reduce using rule 35 (expr -> expr NE expr .)
    [               reduce using rule 35 (expr -> expr NE expr .)
    (               reduce using rule 35 (expr -> expr NE expr .)
    IF              reduce using rule 35 (expr -> expr NE expr .)
    PRINT           reduce using rule 35 (expr -> expr NE expr .)
    RETURN          reduce using rule 35 (expr -> expr NE expr .)
    ID              reduce using rule 35 (expr -> expr NE expr .)
    EYE             reduce using rule 35 (expr -> expr NE expr .)
    ZEROS           reduce using rule 35 (expr -> expr NE expr .)
    ONES            reduce using rule 35 (expr -> expr NE expr .)
    FOR             reduce using rule 35 (expr -> expr NE expr .)
    WHILE           reduce using rule 35 (expr -> expr NE expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! +               [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! -               [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! *               [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! /               [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! DOTADD          [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! DOTSUB          [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! DOTMUL          [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! DOTDIV          [ reduce using rule 35 (expr -> expr NE expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 91

    (36) expr -> expr EQ expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 36 (expr -> expr EQ expr .)
    <               reduce using rule 36 (expr -> expr EQ expr .)
    >               reduce using rule 36 (expr -> expr EQ expr .)
    LE              reduce using rule 36 (expr -> expr EQ expr .)
    GE              reduce using rule 36 (expr -> expr EQ expr .)
    NE              reduce using rule 36 (expr -> expr EQ expr .)
    EQ              reduce using rule 36 (expr -> expr EQ expr .)
    )               reduce using rule 36 (expr -> expr EQ expr .)
    ,               reduce using rule 36 (expr -> expr EQ expr .)
    ]               reduce using rule 36 (expr -> expr EQ expr .)
    :               reduce using rule 36 (expr -> expr EQ expr .)
    {               reduce using rule 36 (expr -> expr EQ expr .)
    BREAK           reduce using rule 36 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 36 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 36 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 36 (expr -> expr EQ expr .)
    [               reduce using rule 36 (expr -> expr EQ expr .)
    (               reduce using rule 36 (expr -> expr EQ expr .)
    IF              reduce using rule 36 (expr -> expr EQ expr .)
    PRINT           reduce using rule 36 (expr -> expr EQ expr .)
    RETURN          reduce using rule 36 (expr -> expr EQ expr .)
    ID              reduce using rule 36 (expr -> expr EQ expr .)
    EYE             reduce using rule 36 (expr -> expr EQ expr .)
    ZEROS           reduce using rule 36 (expr -> expr EQ expr .)
    ONES            reduce using rule 36 (expr -> expr EQ expr .)
    FOR             reduce using rule 36 (expr -> expr EQ expr .)
    WHILE           reduce using rule 36 (expr -> expr EQ expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44

  ! '               [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! DOTADD          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! DOTSUB          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 36 (expr -> expr EQ expr .) ]
  ! <               [ shift and go to state 45 ]
  ! >               [ shift and go to state 46 ]
  ! LE              [ shift and go to state 47 ]
  ! GE              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 49 ]
  ! EQ              [ shift and go to state 50 ]


state 92

    (38) assignment_statement -> assignable = expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 38 (assignment_statement -> assignable = expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 93

    (39) assignment_statement -> assignable ADDASSIGN expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 39 (assignment_statement -> assignable ADDASSIGN expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 94

    (40) assignment_statement -> assignable SUBASSIGN expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 40 (assignment_statement -> assignable SUBASSIGN expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 95

    (41) assignment_statement -> assignable MULASSIGN expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 41 (assignment_statement -> assignable MULASSIGN expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 96

    (42) assignment_statement -> assignable DIVASSIGN expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ;               reduce using rule 42 (assignment_statement -> assignable DIVASSIGN expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 97

    (19) expr -> matrix_init_name ( expr . )
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    )               shift and go to state 109
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 98

    (37) expr -> ( expr ) .

    ;               reduce using rule 37 (expr -> ( expr ) .)
    '               reduce using rule 37 (expr -> ( expr ) .)
    +               reduce using rule 37 (expr -> ( expr ) .)
    -               reduce using rule 37 (expr -> ( expr ) .)
    *               reduce using rule 37 (expr -> ( expr ) .)
    /               reduce using rule 37 (expr -> ( expr ) .)
    DOTADD          reduce using rule 37 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 37 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 37 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 37 (expr -> ( expr ) .)
    <               reduce using rule 37 (expr -> ( expr ) .)
    >               reduce using rule 37 (expr -> ( expr ) .)
    LE              reduce using rule 37 (expr -> ( expr ) .)
    GE              reduce using rule 37 (expr -> ( expr ) .)
    NE              reduce using rule 37 (expr -> ( expr ) .)
    EQ              reduce using rule 37 (expr -> ( expr ) .)
    )               reduce using rule 37 (expr -> ( expr ) .)
    ,               reduce using rule 37 (expr -> ( expr ) .)
    ]               reduce using rule 37 (expr -> ( expr ) .)
    :               reduce using rule 37 (expr -> ( expr ) .)
    {               reduce using rule 37 (expr -> ( expr ) .)
    BREAK           reduce using rule 37 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 37 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 37 (expr -> ( expr ) .)
    INTNUM          reduce using rule 37 (expr -> ( expr ) .)
    [               reduce using rule 37 (expr -> ( expr ) .)
    (               reduce using rule 37 (expr -> ( expr ) .)
    IF              reduce using rule 37 (expr -> ( expr ) .)
    PRINT           reduce using rule 37 (expr -> ( expr ) .)
    RETURN          reduce using rule 37 (expr -> ( expr ) .)
    ID              reduce using rule 37 (expr -> ( expr ) .)
    EYE             reduce using rule 37 (expr -> ( expr ) .)
    ZEROS           reduce using rule 37 (expr -> ( expr ) .)
    ONES            reduce using rule 37 (expr -> ( expr ) .)
    FOR             reduce using rule 37 (expr -> ( expr ) .)
    WHILE           reduce using rule 37 (expr -> ( expr ) .)


state 99

    (46) matrix_init -> [ vector . ]
    (49) vector -> vector . , expr

    ]               shift and go to state 110
    ,               shift and go to state 111


state 100

    (48) vector -> expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ]               reduce using rule 48 (vector -> expr .)
    ,               reduce using rule 48 (vector -> expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 101

    (20) expr -> [ matrix_init ] .

    ;               reduce using rule 20 (expr -> [ matrix_init ] .)
    '               reduce using rule 20 (expr -> [ matrix_init ] .)
    +               reduce using rule 20 (expr -> [ matrix_init ] .)
    -               reduce using rule 20 (expr -> [ matrix_init ] .)
    *               reduce using rule 20 (expr -> [ matrix_init ] .)
    /               reduce using rule 20 (expr -> [ matrix_init ] .)
    DOTADD          reduce using rule 20 (expr -> [ matrix_init ] .)
    DOTSUB          reduce using rule 20 (expr -> [ matrix_init ] .)
    DOTMUL          reduce using rule 20 (expr -> [ matrix_init ] .)
    DOTDIV          reduce using rule 20 (expr -> [ matrix_init ] .)
    <               reduce using rule 20 (expr -> [ matrix_init ] .)
    >               reduce using rule 20 (expr -> [ matrix_init ] .)
    LE              reduce using rule 20 (expr -> [ matrix_init ] .)
    GE              reduce using rule 20 (expr -> [ matrix_init ] .)
    NE              reduce using rule 20 (expr -> [ matrix_init ] .)
    EQ              reduce using rule 20 (expr -> [ matrix_init ] .)
    )               reduce using rule 20 (expr -> [ matrix_init ] .)
    ,               reduce using rule 20 (expr -> [ matrix_init ] .)
    ]               reduce using rule 20 (expr -> [ matrix_init ] .)
    :               reduce using rule 20 (expr -> [ matrix_init ] .)
    {               reduce using rule 20 (expr -> [ matrix_init ] .)
    BREAK           reduce using rule 20 (expr -> [ matrix_init ] .)
    CONTINUE        reduce using rule 20 (expr -> [ matrix_init ] .)
    FLOATNUM        reduce using rule 20 (expr -> [ matrix_init ] .)
    INTNUM          reduce using rule 20 (expr -> [ matrix_init ] .)
    [               reduce using rule 20 (expr -> [ matrix_init ] .)
    (               reduce using rule 20 (expr -> [ matrix_init ] .)
    IF              reduce using rule 20 (expr -> [ matrix_init ] .)
    PRINT           reduce using rule 20 (expr -> [ matrix_init ] .)
    RETURN          reduce using rule 20 (expr -> [ matrix_init ] .)
    ID              reduce using rule 20 (expr -> [ matrix_init ] .)
    EYE             reduce using rule 20 (expr -> [ matrix_init ] .)
    ZEROS           reduce using rule 20 (expr -> [ matrix_init ] .)
    ONES            reduce using rule 20 (expr -> [ matrix_init ] .)
    FOR             reduce using rule 20 (expr -> [ matrix_init ] .)
    WHILE           reduce using rule 20 (expr -> [ matrix_init ] .)


state 102

    (47) matrix_init -> matrix_init , . [ vector ]

    [               shift and go to state 112


state 103

    (53) if_statement -> IF ( expr . ) instructions
    (54) if_statement -> IF ( expr . ) instructions ELSE instructions
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    )               shift and go to state 113
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 104

    (62) printables -> printables , . printable
    (63) printable -> . STRING
    (64) printable -> . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    STRING          shift and go to state 70
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    printable                      shift and go to state 114
    expr                           shift and go to state 71
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 105

    (45) matrix_access -> ID [ expr . , expr ]
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ,               shift and go to state 115
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 106

    (57) for_loop -> FOR ID = . range instructions
    (59) range -> . expr : expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    range                          shift and go to state 116
    expr                           shift and go to state 117
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 107

    (58) while_loop -> WHILE ( expr . ) instructions
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    )               shift and go to state 118
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 108

    (7) instructions -> { instructions } instructions .
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FLOATNUM resolved as shift
  ! shift/reduce conflict for INTNUM resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EYE resolved as shift
  ! shift/reduce conflict for ZEROS resolved as shift
  ! shift/reduce conflict for ONES resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 7 (instructions -> { instructions } instructions .)
    }               reduce using rule 7 (instructions -> { instructions } instructions .)
    ELSE            reduce using rule 7 (instructions -> { instructions } instructions .)
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

  ! BREAK           [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! CONTINUE        [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! FLOATNUM        [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! INTNUM          [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! [               [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! -               [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! (               [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! IF              [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! PRINT           [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! RETURN          [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! ID              [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! EYE             [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! ZEROS           [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! ONES            [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! FOR             [ reduce using rule 7 (instructions -> { instructions } instructions .) ]
  ! WHILE           [ reduce using rule 7 (instructions -> { instructions } instructions .) ]

    instruction                    shift and go to state 33
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 109

    (19) expr -> matrix_init_name ( expr ) .

    ;               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    '               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    +               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    -               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    *               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    /               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    DOTADD          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    DOTSUB          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    DOTMUL          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    DOTDIV          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    <               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    >               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    LE              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    GE              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    NE              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    EQ              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    )               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    ,               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    ]               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    :               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    {               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    BREAK           reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    CONTINUE        reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    FLOATNUM        reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    INTNUM          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    [               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    (               reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    IF              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    PRINT           reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    RETURN          reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    ID              reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    EYE             reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    ZEROS           reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    ONES            reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    FOR             reduce using rule 19 (expr -> matrix_init_name ( expr ) .)
    WHILE           reduce using rule 19 (expr -> matrix_init_name ( expr ) .)


state 110

    (46) matrix_init -> [ vector ] .

    ]               reduce using rule 46 (matrix_init -> [ vector ] .)
    ,               reduce using rule 46 (matrix_init -> [ vector ] .)


state 111

    (49) vector -> vector , . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 119
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 112

    (47) matrix_init -> matrix_init , [ . vector ]
    (48) vector -> . expr
    (49) vector -> . vector , expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    vector                         shift and go to state 120
    expr                           shift and go to state 100
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 113

    (53) if_statement -> IF ( expr ) . instructions
    (54) if_statement -> IF ( expr ) . instructions ELSE instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    expr                           shift and go to state 6
    instructions                   shift and go to state 121
    instruction                    shift and go to state 4
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 114

    (62) printables -> printables , printable .

    ,               reduce using rule 62 (printables -> printables , printable .)
    ;               reduce using rule 62 (printables -> printables , printable .)


state 115

    (45) matrix_access -> ID [ expr , . expr ]
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 122
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 116

    (57) for_loop -> FOR ID = range . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    instructions                   shift and go to state 123
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 117

    (59) range -> expr . : expr
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    :               shift and go to state 124
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 118

    (58) while_loop -> WHILE ( expr ) . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    expr                           shift and go to state 6
    instructions                   shift and go to state 125
    instruction                    shift and go to state 4
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 119

    (49) vector -> vector , expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ]               reduce using rule 49 (vector -> vector , expr .)
    ,               reduce using rule 49 (vector -> vector , expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 120

    (47) matrix_init -> matrix_init , [ vector . ]
    (49) vector -> vector . , expr

    ]               shift and go to state 126
    ,               shift and go to state 111


state 121

    (53) if_statement -> IF ( expr ) instructions .
    (54) if_statement -> IF ( expr ) instructions . ELSE instructions
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    BREAK           reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    CONTINUE        reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    FLOATNUM        reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    INTNUM          reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    [               reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    (               reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    IF              reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    PRINT           reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    RETURN          reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    ID              reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    EYE             reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    ZEROS           reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    ONES            reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    FOR             reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    WHILE           reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    $end            reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    }               reduce using rule 53 (if_statement -> IF ( expr ) instructions .)
    ELSE            shift and go to state 127
    -               shift and go to state 20

  ! -               [ reduce using rule 53 (if_statement -> IF ( expr ) instructions .) ]
  ! ELSE            [ reduce using rule 53 (if_statement -> IF ( expr ) instructions .) ]
  ! BREAK           [ shift and go to state 10 ]
  ! CONTINUE        [ shift and go to state 11 ]
  ! FLOATNUM        [ shift and go to state 15 ]
  ! INTNUM          [ shift and go to state 16 ]
  ! [               [ shift and go to state 19 ]
  ! (               [ shift and go to state 18 ]
  ! IF              [ shift and go to state 21 ]
  ! PRINT           [ shift and go to state 24 ]
  ! RETURN          [ shift and go to state 25 ]
  ! ID              [ shift and go to state 26 ]
  ! EYE             [ shift and go to state 28 ]
  ! ZEROS           [ shift and go to state 29 ]
  ! ONES            [ shift and go to state 30 ]
  ! FOR             [ shift and go to state 31 ]
  ! WHILE           [ shift and go to state 32 ]

    expr                           shift and go to state 6
    instruction                    shift and go to state 33
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 122

    (45) matrix_access -> ID [ expr , expr . ]
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

    ]               shift and go to state 128
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50


state 123

    (57) for_loop -> FOR ID = range instructions .
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    BREAK           reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    CONTINUE        reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    FLOATNUM        reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    INTNUM          reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    [               reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    (               reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    IF              reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    PRINT           reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    RETURN          reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    ID              reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    EYE             reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    ZEROS           reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    ONES            reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    FOR             reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    WHILE           reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    $end            reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    }               reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    ELSE            reduce using rule 57 (for_loop -> FOR ID = range instructions .)
    -               shift and go to state 20

  ! -               [ reduce using rule 57 (for_loop -> FOR ID = range instructions .) ]
  ! BREAK           [ shift and go to state 10 ]
  ! CONTINUE        [ shift and go to state 11 ]
  ! FLOATNUM        [ shift and go to state 15 ]
  ! INTNUM          [ shift and go to state 16 ]
  ! [               [ shift and go to state 19 ]
  ! (               [ shift and go to state 18 ]
  ! IF              [ shift and go to state 21 ]
  ! PRINT           [ shift and go to state 24 ]
  ! RETURN          [ shift and go to state 25 ]
  ! ID              [ shift and go to state 26 ]
  ! EYE             [ shift and go to state 28 ]
  ! ZEROS           [ shift and go to state 29 ]
  ! ONES            [ shift and go to state 30 ]
  ! FOR             [ shift and go to state 31 ]
  ! WHILE           [ shift and go to state 32 ]

    instruction                    shift and go to state 33
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 124

    (59) range -> expr : . expr
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (45) matrix_access -> . ID [ expr , expr ]

    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30

    expr                           shift and go to state 129
    assignable                     shift and go to state 63
    matrix_init_name               shift and go to state 17
    matrix_access                  shift and go to state 27

state 125

    (58) while_loop -> WHILE ( expr ) instructions .
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for FLOATNUM resolved as shift
  ! shift/reduce conflict for INTNUM resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for EYE resolved as shift
  ! shift/reduce conflict for ZEROS resolved as shift
  ! shift/reduce conflict for ONES resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    $end            reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .)
    }               reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .)
    ELSE            reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .)
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

  ! BREAK           [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! CONTINUE        [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! FLOATNUM        [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! INTNUM          [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! [               [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! -               [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! (               [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! IF              [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! PRINT           [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! RETURN          [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! ID              [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! EYE             [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! ZEROS           [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! ONES            [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! FOR             [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]
  ! WHILE           [ reduce using rule 58 (while_loop -> WHILE ( expr ) instructions .) ]

    expr                           shift and go to state 6
    instruction                    shift and go to state 33
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 126

    (47) matrix_init -> matrix_init , [ vector ] .

    ]               reduce using rule 47 (matrix_init -> matrix_init , [ vector ] .)
    ,               reduce using rule 47 (matrix_init -> matrix_init , [ vector ] .)


state 127

    (54) if_statement -> IF ( expr ) instructions ELSE . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instructions -> . { instructions }
    (7) instructions -> . { instructions } instructions
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    FLOATNUM        shift and go to state 15
    INTNUM          shift and go to state 16
    [               shift and go to state 19
    -               shift and go to state 20
    (               shift and go to state 18
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    ID              shift and go to state 26
    EYE             shift and go to state 28
    ZEROS           shift and go to state 29
    ONES            shift and go to state 30
    FOR             shift and go to state 31
    WHILE           shift and go to state 32

    expr                           shift and go to state 6
    instructions                   shift and go to state 130
    instruction                    shift and go to state 4
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27

state 128

    (45) matrix_access -> ID [ expr , expr ] .

    =               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ADDASSIGN       reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    SUBASSIGN       reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    MULASSIGN       reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    DIVASSIGN       reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ;               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    '               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    +               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    -               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    *               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    /               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    DOTADD          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    DOTSUB          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    DOTMUL          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    DOTDIV          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    <               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    >               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    LE              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    GE              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    NE              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    EQ              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    )               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ,               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ]               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    :               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    {               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    BREAK           reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    FLOATNUM        reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    INTNUM          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    [               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    (               reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    IF              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    PRINT           reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    RETURN          reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ID              reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    EYE             reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ZEROS           reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    ONES            reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    FOR             reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)
    WHILE           reduce using rule 45 (matrix_access -> ID [ expr , expr ] .)


state 129

    (59) range -> expr : expr .
    (22) expr -> expr . '
    (23) expr -> expr . + expr
    (24) expr -> expr . - expr
    (25) expr -> expr . * expr
    (26) expr -> expr . / expr
    (27) expr -> expr . DOTADD expr
    (28) expr -> expr . DOTSUB expr
    (29) expr -> expr . DOTMUL expr
    (30) expr -> expr . DOTDIV expr
    (31) expr -> expr . < expr
    (32) expr -> expr . > expr
    (33) expr -> expr . LE expr
    (34) expr -> expr . GE expr
    (35) expr -> expr . NE expr
    (36) expr -> expr . EQ expr

  ! shift/reduce conflict for - resolved as shift
    {               reduce using rule 59 (range -> expr : expr .)
    BREAK           reduce using rule 59 (range -> expr : expr .)
    CONTINUE        reduce using rule 59 (range -> expr : expr .)
    FLOATNUM        reduce using rule 59 (range -> expr : expr .)
    INTNUM          reduce using rule 59 (range -> expr : expr .)
    [               reduce using rule 59 (range -> expr : expr .)
    (               reduce using rule 59 (range -> expr : expr .)
    IF              reduce using rule 59 (range -> expr : expr .)
    PRINT           reduce using rule 59 (range -> expr : expr .)
    RETURN          reduce using rule 59 (range -> expr : expr .)
    ID              reduce using rule 59 (range -> expr : expr .)
    EYE             reduce using rule 59 (range -> expr : expr .)
    ZEROS           reduce using rule 59 (range -> expr : expr .)
    ONES            reduce using rule 59 (range -> expr : expr .)
    FOR             reduce using rule 59 (range -> expr : expr .)
    WHILE           reduce using rule 59 (range -> expr : expr .)
    '               shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    <               shift and go to state 45
    >               shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    NE              shift and go to state 49
    EQ              shift and go to state 50

  ! -               [ reduce using rule 59 (range -> expr : expr .) ]


state 130

    (54) if_statement -> IF ( expr ) instructions ELSE instructions .
    (4) instructions -> instructions . instruction
    (8) instruction -> . expr ;
    (9) instruction -> . assignment_statement ;
    (10) instruction -> . if_statement
    (11) instruction -> . loop
    (12) instruction -> . BREAK ;
    (13) instruction -> . CONTINUE ;
    (14) instruction -> . print_statement ;
    (15) instruction -> . return_statement ;
    (16) expr -> . assignable
    (17) expr -> . FLOATNUM
    (18) expr -> . INTNUM
    (19) expr -> . matrix_init_name ( expr )
    (20) expr -> . [ matrix_init ]
    (21) expr -> . - expr
    (22) expr -> . expr '
    (23) expr -> . expr + expr
    (24) expr -> . expr - expr
    (25) expr -> . expr * expr
    (26) expr -> . expr / expr
    (27) expr -> . expr DOTADD expr
    (28) expr -> . expr DOTSUB expr
    (29) expr -> . expr DOTMUL expr
    (30) expr -> . expr DOTDIV expr
    (31) expr -> . expr < expr
    (32) expr -> . expr > expr
    (33) expr -> . expr LE expr
    (34) expr -> . expr GE expr
    (35) expr -> . expr NE expr
    (36) expr -> . expr EQ expr
    (37) expr -> . ( expr )
    (38) assignment_statement -> . assignable = expr
    (39) assignment_statement -> . assignable ADDASSIGN expr
    (40) assignment_statement -> . assignable SUBASSIGN expr
    (41) assignment_statement -> . assignable MULASSIGN expr
    (42) assignment_statement -> . assignable DIVASSIGN expr
    (53) if_statement -> . IF ( expr ) instructions
    (54) if_statement -> . IF ( expr ) instructions ELSE instructions
    (55) loop -> . for_loop
    (56) loop -> . while_loop
    (60) print_statement -> . PRINT printables
    (65) return_statement -> . RETURN
    (66) return_statement -> . RETURN expr
    (67) return_statement -> . RETURN STRING
    (43) assignable -> . ID
    (44) assignable -> . matrix_access
    (50) matrix_init_name -> . EYE
    (51) matrix_init_name -> . ZEROS
    (52) matrix_init_name -> . ONES
    (57) for_loop -> . FOR ID = range instructions
    (58) while_loop -> . WHILE ( expr ) instructions
    (45) matrix_access -> . ID [ expr , expr ]

    BREAK           reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    CONTINUE        reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    FLOATNUM        reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    INTNUM          reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    [               reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    (               reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    IF              reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    PRINT           reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    RETURN          reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    ID              reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    EYE             reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    ZEROS           reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    ONES            reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    FOR             reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    WHILE           reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    $end            reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    }               reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    ELSE            reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .)
    -               shift and go to state 20

  ! -               [ reduce using rule 54 (if_statement -> IF ( expr ) instructions ELSE instructions .) ]
  ! BREAK           [ shift and go to state 10 ]
  ! CONTINUE        [ shift and go to state 11 ]
  ! FLOATNUM        [ shift and go to state 15 ]
  ! INTNUM          [ shift and go to state 16 ]
  ! [               [ shift and go to state 19 ]
  ! (               [ shift and go to state 18 ]
  ! IF              [ shift and go to state 21 ]
  ! PRINT           [ shift and go to state 24 ]
  ! RETURN          [ shift and go to state 25 ]
  ! ID              [ shift and go to state 26 ]
  ! EYE             [ shift and go to state 28 ]
  ! ZEROS           [ shift and go to state 29 ]
  ! ONES            [ shift and go to state 30 ]
  ! FOR             [ shift and go to state 31 ]
  ! WHILE           [ shift and go to state 32 ]

    expr                           shift and go to state 6
    instruction                    shift and go to state 33
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    assignable                     shift and go to state 14
    matrix_init_name               shift and go to state 17
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23
    matrix_access                  shift and go to state 27
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 26 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 77 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 77 resolved as shift
WARNING: shift/reduce conflict for FLOATNUM in state 77 resolved as shift
WARNING: shift/reduce conflict for INTNUM in state 77 resolved as shift
WARNING: shift/reduce conflict for [ in state 77 resolved as shift
WARNING: shift/reduce conflict for - in state 77 resolved as shift
WARNING: shift/reduce conflict for ( in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 77 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for EYE in state 77 resolved as shift
WARNING: shift/reduce conflict for ZEROS in state 77 resolved as shift
WARNING: shift/reduce conflict for ONES in state 77 resolved as shift
WARNING: shift/reduce conflict for FOR in state 77 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 77 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 108 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 108 resolved as shift
WARNING: shift/reduce conflict for FLOATNUM in state 108 resolved as shift
WARNING: shift/reduce conflict for INTNUM in state 108 resolved as shift
WARNING: shift/reduce conflict for [ in state 108 resolved as shift
WARNING: shift/reduce conflict for - in state 108 resolved as shift
WARNING: shift/reduce conflict for ( in state 108 resolved as shift
WARNING: shift/reduce conflict for IF in state 108 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 108 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 108 resolved as shift
WARNING: shift/reduce conflict for ID in state 108 resolved as shift
WARNING: shift/reduce conflict for EYE in state 108 resolved as shift
WARNING: shift/reduce conflict for ZEROS in state 108 resolved as shift
WARNING: shift/reduce conflict for ONES in state 108 resolved as shift
WARNING: shift/reduce conflict for FOR in state 108 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 108 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 125 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 125 resolved as shift
WARNING: shift/reduce conflict for FLOATNUM in state 125 resolved as shift
WARNING: shift/reduce conflict for INTNUM in state 125 resolved as shift
WARNING: shift/reduce conflict for [ in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 125 resolved as shift
WARNING: shift/reduce conflict for ( in state 125 resolved as shift
WARNING: shift/reduce conflict for IF in state 125 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 125 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for EYE in state 125 resolved as shift
WARNING: shift/reduce conflict for ZEROS in state 125 resolved as shift
WARNING: shift/reduce conflict for ONES in state 125 resolved as shift
WARNING: shift/reduce conflict for FOR in state 125 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 129 resolved as shift
