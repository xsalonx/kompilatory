Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> <empty>
Rule 3     instructions_opt -> instructions
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> expr ;
Rule 8     instruction -> assignment_statement ;
Rule 9     instruction -> if_statement
Rule 10    instruction -> loop
Rule 11    instruction -> BREAK ;
Rule 12    instruction -> CONTINUE ;
Rule 13    instruction -> print_statement ;
Rule 14    instruction -> return_statement ;
Rule 15    expr -> expr + expr
Rule 16    expr -> expr - expr
Rule 17    expr -> expr * expr
Rule 18    expr -> expr / expr
Rule 19    expr -> expr DOTADD expr
Rule 20    expr -> expr DOTSUB expr
Rule 21    expr -> expr DOTMUL expr
Rule 22    expr -> expr DOTDIV expr
Rule 23    expr -> expr < expr
Rule 24    expr -> expr > expr
Rule 25    expr -> expr LE expr
Rule 26    expr -> expr GE expr
Rule 27    expr -> expr NE expr
Rule 28    expr -> expr EQ expr
Rule 29    expr -> [ matrix_init ]
Rule 30    expr -> matrix_init_name ( expr )
Rule 31    expr -> INTNUM
Rule 32    expr -> FLOATNUM
Rule 33    expr -> assignable
Rule 34    expr -> ( expr )
Rule 35    expr -> - expr
Rule 36    expr -> expr '
Rule 37    assignment_statement -> assignable = expr
Rule 38    assignment_statement -> assignable ADDASSIGN expr
Rule 39    assignment_statement -> assignable SUBASSIGN expr
Rule 40    assignment_statement -> assignable MULASSIGN expr
Rule 41    assignment_statement -> assignable DIVASSIGN expr
Rule 42    assignable -> ID
Rule 43    assignable -> ID [ expr , expr ]
Rule 44    matrix_init -> [ vector ]
Rule 45    matrix_init -> matrix_init , [ vector ]
Rule 46    vector -> expr
Rule 47    vector -> vector , expr
Rule 48    matrix_init_name -> EYE
Rule 49    matrix_init_name -> ZEROS
Rule 50    matrix_init_name -> ONES
Rule 51    if_statement -> IF ( expr ) instruction
Rule 52    if_statement -> IF ( expr ) instruction ELSE instruction
Rule 53    loop -> for_loop
Rule 54    loop -> while_loop
Rule 55    for_loop -> FOR ID = range instruction
Rule 56    while_loop -> WHILE ( expr ) instruction
Rule 57    range -> expr : expr
Rule 58    print_statement -> PRINT printables
Rule 59    printables -> printable
Rule 60    printables -> printables , printable
Rule 61    printable -> expr
Rule 62    printable -> STRING
Rule 63    return_statement -> RETURN
Rule 64    return_statement -> RETURN expr
Rule 65    return_statement -> RETURN STRING

Terminals, with rules where they appear

'                    : 36
(                    : 30 34 51 52 56
)                    : 30 34 51 52 56
*                    : 17
+                    : 15
,                    : 43 45 47 60
-                    : 16 35
/                    : 18
:                    : 57
;                    : 7 8 11 12 13 14
<                    : 23
=                    : 37 55
>                    : 24
ADDASSIGN            : 38
BREAK                : 11
CONTINUE             : 12
DIVASSIGN            : 41
DOTADD               : 19
DOTDIV               : 22
DOTMUL               : 21
DOTSUB               : 20
ELSE                 : 52
EQ                   : 28
EYE                  : 48
FLOATNUM             : 32
FOR                  : 55
GE                   : 26
ID                   : 42 43 55
IF                   : 51 52
INTNUM               : 31
LE                   : 25
MULASSIGN            : 40
NE                   : 27
ONES                 : 50
PRINT                : 58
RETURN               : 63 64 65
STRING               : 62 65
SUBASSIGN            : 39
WHILE                : 56
ZEROS                : 49
[                    : 29 43 44 45
]                    : 29 43 44 45
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assignable           : 33 37 38 39 40 41
assignment_statement : 8
expr                 : 7 15 15 16 16 17 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 30 34 35 36 37 38 39 40 41 43 43 46 47 51 52 56 57 57 61 64
for_loop             : 53
if_statement         : 9
instruction          : 4 5 51 52 52 55 56
instructions         : 3 4 6
instructions_opt     : 1
loop                 : 10
matrix_init          : 29 45
matrix_init_name     : 30
print_statement      : 13
printable            : 59 60
printables           : 58 60
program              : 0
range                : 55
return_statement     : 14
vector               : 44 45 47
while_loop           : 54

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> .
    (3) instructions_opt -> . instructions
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    $end            reduce using rule 2 (instructions_opt -> .)
    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (3) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    $end            reduce using rule 3 (instructions_opt -> instructions .)
    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    instruction                    shift and go to state 32
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 4

    (5) instructions -> instruction .

    {               reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    [               reduce using rule 5 (instructions -> instruction .)
    INTNUM          reduce using rule 5 (instructions -> instruction .)
    FLOATNUM        reduce using rule 5 (instructions -> instruction .)
    (               reduce using rule 5 (instructions -> instruction .)
    -               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    EYE             reduce using rule 5 (instructions -> instruction .)
    ZEROS           reduce using rule 5 (instructions -> instruction .)
    ONES            reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    instructions                   shift and go to state 33
    instruction                    shift and go to state 4
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 6

    (7) instruction -> expr . ;
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 7

    (8) instruction -> assignment_statement . ;

    ;               shift and go to state 50


state 8

    (9) instruction -> if_statement .

    {               reduce using rule 9 (instruction -> if_statement .)
    BREAK           reduce using rule 9 (instruction -> if_statement .)
    CONTINUE        reduce using rule 9 (instruction -> if_statement .)
    [               reduce using rule 9 (instruction -> if_statement .)
    INTNUM          reduce using rule 9 (instruction -> if_statement .)
    FLOATNUM        reduce using rule 9 (instruction -> if_statement .)
    (               reduce using rule 9 (instruction -> if_statement .)
    -               reduce using rule 9 (instruction -> if_statement .)
    IF              reduce using rule 9 (instruction -> if_statement .)
    PRINT           reduce using rule 9 (instruction -> if_statement .)
    RETURN          reduce using rule 9 (instruction -> if_statement .)
    EYE             reduce using rule 9 (instruction -> if_statement .)
    ZEROS           reduce using rule 9 (instruction -> if_statement .)
    ONES            reduce using rule 9 (instruction -> if_statement .)
    ID              reduce using rule 9 (instruction -> if_statement .)
    FOR             reduce using rule 9 (instruction -> if_statement .)
    WHILE           reduce using rule 9 (instruction -> if_statement .)
    $end            reduce using rule 9 (instruction -> if_statement .)
    }               reduce using rule 9 (instruction -> if_statement .)
    ELSE            reduce using rule 9 (instruction -> if_statement .)


state 9

    (10) instruction -> loop .

    {               reduce using rule 10 (instruction -> loop .)
    BREAK           reduce using rule 10 (instruction -> loop .)
    CONTINUE        reduce using rule 10 (instruction -> loop .)
    [               reduce using rule 10 (instruction -> loop .)
    INTNUM          reduce using rule 10 (instruction -> loop .)
    FLOATNUM        reduce using rule 10 (instruction -> loop .)
    (               reduce using rule 10 (instruction -> loop .)
    -               reduce using rule 10 (instruction -> loop .)
    IF              reduce using rule 10 (instruction -> loop .)
    PRINT           reduce using rule 10 (instruction -> loop .)
    RETURN          reduce using rule 10 (instruction -> loop .)
    EYE             reduce using rule 10 (instruction -> loop .)
    ZEROS           reduce using rule 10 (instruction -> loop .)
    ONES            reduce using rule 10 (instruction -> loop .)
    ID              reduce using rule 10 (instruction -> loop .)
    FOR             reduce using rule 10 (instruction -> loop .)
    WHILE           reduce using rule 10 (instruction -> loop .)
    $end            reduce using rule 10 (instruction -> loop .)
    }               reduce using rule 10 (instruction -> loop .)
    ELSE            reduce using rule 10 (instruction -> loop .)


state 10

    (11) instruction -> BREAK . ;

    ;               shift and go to state 51


state 11

    (12) instruction -> CONTINUE . ;

    ;               shift and go to state 52


state 12

    (13) instruction -> print_statement . ;

    ;               shift and go to state 53


state 13

    (14) instruction -> return_statement . ;

    ;               shift and go to state 54


state 14

    (35) expr -> - . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 55
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 15

    (29) expr -> [ . matrix_init ]
    (44) matrix_init -> . [ vector ]
    (45) matrix_init -> . matrix_init , [ vector ]

    [               shift and go to state 57

    matrix_init                    shift and go to state 58

state 16

    (30) expr -> matrix_init_name . ( expr )

    (               shift and go to state 59


state 17

    (34) expr -> ( . expr )
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 60
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 18

    (31) expr -> INTNUM .

    ;               reduce using rule 31 (expr -> INTNUM .)
    +               reduce using rule 31 (expr -> INTNUM .)
    -               reduce using rule 31 (expr -> INTNUM .)
    *               reduce using rule 31 (expr -> INTNUM .)
    /               reduce using rule 31 (expr -> INTNUM .)
    DOTADD          reduce using rule 31 (expr -> INTNUM .)
    DOTSUB          reduce using rule 31 (expr -> INTNUM .)
    DOTMUL          reduce using rule 31 (expr -> INTNUM .)
    DOTDIV          reduce using rule 31 (expr -> INTNUM .)
    <               reduce using rule 31 (expr -> INTNUM .)
    >               reduce using rule 31 (expr -> INTNUM .)
    LE              reduce using rule 31 (expr -> INTNUM .)
    GE              reduce using rule 31 (expr -> INTNUM .)
    NE              reduce using rule 31 (expr -> INTNUM .)
    EQ              reduce using rule 31 (expr -> INTNUM .)
    '               reduce using rule 31 (expr -> INTNUM .)
    )               reduce using rule 31 (expr -> INTNUM .)
    ,               reduce using rule 31 (expr -> INTNUM .)
    ]               reduce using rule 31 (expr -> INTNUM .)
    :               reduce using rule 31 (expr -> INTNUM .)
    {               reduce using rule 31 (expr -> INTNUM .)
    BREAK           reduce using rule 31 (expr -> INTNUM .)
    CONTINUE        reduce using rule 31 (expr -> INTNUM .)
    [               reduce using rule 31 (expr -> INTNUM .)
    INTNUM          reduce using rule 31 (expr -> INTNUM .)
    FLOATNUM        reduce using rule 31 (expr -> INTNUM .)
    (               reduce using rule 31 (expr -> INTNUM .)
    IF              reduce using rule 31 (expr -> INTNUM .)
    PRINT           reduce using rule 31 (expr -> INTNUM .)
    RETURN          reduce using rule 31 (expr -> INTNUM .)
    EYE             reduce using rule 31 (expr -> INTNUM .)
    ZEROS           reduce using rule 31 (expr -> INTNUM .)
    ONES            reduce using rule 31 (expr -> INTNUM .)
    ID              reduce using rule 31 (expr -> INTNUM .)
    FOR             reduce using rule 31 (expr -> INTNUM .)
    WHILE           reduce using rule 31 (expr -> INTNUM .)


state 19

    (32) expr -> FLOATNUM .

    ;               reduce using rule 32 (expr -> FLOATNUM .)
    +               reduce using rule 32 (expr -> FLOATNUM .)
    -               reduce using rule 32 (expr -> FLOATNUM .)
    *               reduce using rule 32 (expr -> FLOATNUM .)
    /               reduce using rule 32 (expr -> FLOATNUM .)
    DOTADD          reduce using rule 32 (expr -> FLOATNUM .)
    DOTSUB          reduce using rule 32 (expr -> FLOATNUM .)
    DOTMUL          reduce using rule 32 (expr -> FLOATNUM .)
    DOTDIV          reduce using rule 32 (expr -> FLOATNUM .)
    <               reduce using rule 32 (expr -> FLOATNUM .)
    >               reduce using rule 32 (expr -> FLOATNUM .)
    LE              reduce using rule 32 (expr -> FLOATNUM .)
    GE              reduce using rule 32 (expr -> FLOATNUM .)
    NE              reduce using rule 32 (expr -> FLOATNUM .)
    EQ              reduce using rule 32 (expr -> FLOATNUM .)
    '               reduce using rule 32 (expr -> FLOATNUM .)
    )               reduce using rule 32 (expr -> FLOATNUM .)
    ,               reduce using rule 32 (expr -> FLOATNUM .)
    ]               reduce using rule 32 (expr -> FLOATNUM .)
    :               reduce using rule 32 (expr -> FLOATNUM .)
    {               reduce using rule 32 (expr -> FLOATNUM .)
    BREAK           reduce using rule 32 (expr -> FLOATNUM .)
    CONTINUE        reduce using rule 32 (expr -> FLOATNUM .)
    [               reduce using rule 32 (expr -> FLOATNUM .)
    INTNUM          reduce using rule 32 (expr -> FLOATNUM .)
    FLOATNUM        reduce using rule 32 (expr -> FLOATNUM .)
    (               reduce using rule 32 (expr -> FLOATNUM .)
    IF              reduce using rule 32 (expr -> FLOATNUM .)
    PRINT           reduce using rule 32 (expr -> FLOATNUM .)
    RETURN          reduce using rule 32 (expr -> FLOATNUM .)
    EYE             reduce using rule 32 (expr -> FLOATNUM .)
    ZEROS           reduce using rule 32 (expr -> FLOATNUM .)
    ONES            reduce using rule 32 (expr -> FLOATNUM .)
    ID              reduce using rule 32 (expr -> FLOATNUM .)
    FOR             reduce using rule 32 (expr -> FLOATNUM .)
    WHILE           reduce using rule 32 (expr -> FLOATNUM .)


state 20

    (33) expr -> assignable .
    (37) assignment_statement -> assignable . = expr
    (38) assignment_statement -> assignable . ADDASSIGN expr
    (39) assignment_statement -> assignable . SUBASSIGN expr
    (40) assignment_statement -> assignable . MULASSIGN expr
    (41) assignment_statement -> assignable . DIVASSIGN expr

    ;               reduce using rule 33 (expr -> assignable .)
    +               reduce using rule 33 (expr -> assignable .)
    -               reduce using rule 33 (expr -> assignable .)
    *               reduce using rule 33 (expr -> assignable .)
    /               reduce using rule 33 (expr -> assignable .)
    DOTADD          reduce using rule 33 (expr -> assignable .)
    DOTSUB          reduce using rule 33 (expr -> assignable .)
    DOTMUL          reduce using rule 33 (expr -> assignable .)
    DOTDIV          reduce using rule 33 (expr -> assignable .)
    <               reduce using rule 33 (expr -> assignable .)
    >               reduce using rule 33 (expr -> assignable .)
    LE              reduce using rule 33 (expr -> assignable .)
    GE              reduce using rule 33 (expr -> assignable .)
    NE              reduce using rule 33 (expr -> assignable .)
    EQ              reduce using rule 33 (expr -> assignable .)
    '               reduce using rule 33 (expr -> assignable .)
    =               shift and go to state 61
    ADDASSIGN       shift and go to state 62
    SUBASSIGN       shift and go to state 63
    MULASSIGN       shift and go to state 64
    DIVASSIGN       shift and go to state 65


state 21

    (51) if_statement -> IF . ( expr ) instruction
    (52) if_statement -> IF . ( expr ) instruction ELSE instruction

    (               shift and go to state 66


state 22

    (53) loop -> for_loop .

    {               reduce using rule 53 (loop -> for_loop .)
    BREAK           reduce using rule 53 (loop -> for_loop .)
    CONTINUE        reduce using rule 53 (loop -> for_loop .)
    [               reduce using rule 53 (loop -> for_loop .)
    INTNUM          reduce using rule 53 (loop -> for_loop .)
    FLOATNUM        reduce using rule 53 (loop -> for_loop .)
    (               reduce using rule 53 (loop -> for_loop .)
    -               reduce using rule 53 (loop -> for_loop .)
    IF              reduce using rule 53 (loop -> for_loop .)
    PRINT           reduce using rule 53 (loop -> for_loop .)
    RETURN          reduce using rule 53 (loop -> for_loop .)
    EYE             reduce using rule 53 (loop -> for_loop .)
    ZEROS           reduce using rule 53 (loop -> for_loop .)
    ONES            reduce using rule 53 (loop -> for_loop .)
    ID              reduce using rule 53 (loop -> for_loop .)
    FOR             reduce using rule 53 (loop -> for_loop .)
    WHILE           reduce using rule 53 (loop -> for_loop .)
    $end            reduce using rule 53 (loop -> for_loop .)
    }               reduce using rule 53 (loop -> for_loop .)
    ELSE            reduce using rule 53 (loop -> for_loop .)


state 23

    (54) loop -> while_loop .

    {               reduce using rule 54 (loop -> while_loop .)
    BREAK           reduce using rule 54 (loop -> while_loop .)
    CONTINUE        reduce using rule 54 (loop -> while_loop .)
    [               reduce using rule 54 (loop -> while_loop .)
    INTNUM          reduce using rule 54 (loop -> while_loop .)
    FLOATNUM        reduce using rule 54 (loop -> while_loop .)
    (               reduce using rule 54 (loop -> while_loop .)
    -               reduce using rule 54 (loop -> while_loop .)
    IF              reduce using rule 54 (loop -> while_loop .)
    PRINT           reduce using rule 54 (loop -> while_loop .)
    RETURN          reduce using rule 54 (loop -> while_loop .)
    EYE             reduce using rule 54 (loop -> while_loop .)
    ZEROS           reduce using rule 54 (loop -> while_loop .)
    ONES            reduce using rule 54 (loop -> while_loop .)
    ID              reduce using rule 54 (loop -> while_loop .)
    FOR             reduce using rule 54 (loop -> while_loop .)
    WHILE           reduce using rule 54 (loop -> while_loop .)
    $end            reduce using rule 54 (loop -> while_loop .)
    }               reduce using rule 54 (loop -> while_loop .)
    ELSE            reduce using rule 54 (loop -> while_loop .)


state 24

    (58) print_statement -> PRINT . printables
    (59) printables -> . printable
    (60) printables -> . printables , printable
    (61) printable -> . expr
    (62) printable -> . STRING
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    STRING          shift and go to state 70
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    printables                     shift and go to state 67
    printable                      shift and go to state 68
    expr                           shift and go to state 69
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 25

    (63) return_statement -> RETURN .
    (64) return_statement -> RETURN . expr
    (65) return_statement -> RETURN . STRING
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    ;               reduce using rule 63 (return_statement -> RETURN .)
    STRING          shift and go to state 72
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 71
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 26

    (48) matrix_init_name -> EYE .

    (               reduce using rule 48 (matrix_init_name -> EYE .)


state 27

    (49) matrix_init_name -> ZEROS .

    (               reduce using rule 49 (matrix_init_name -> ZEROS .)


state 28

    (50) matrix_init_name -> ONES .

    (               reduce using rule 50 (matrix_init_name -> ONES .)


state 29

    (42) assignable -> ID .
    (43) assignable -> ID . [ expr , expr ]

  ! shift/reduce conflict for [ resolved as shift
    =               reduce using rule 42 (assignable -> ID .)
    ADDASSIGN       reduce using rule 42 (assignable -> ID .)
    SUBASSIGN       reduce using rule 42 (assignable -> ID .)
    MULASSIGN       reduce using rule 42 (assignable -> ID .)
    DIVASSIGN       reduce using rule 42 (assignable -> ID .)
    ;               reduce using rule 42 (assignable -> ID .)
    +               reduce using rule 42 (assignable -> ID .)
    -               reduce using rule 42 (assignable -> ID .)
    *               reduce using rule 42 (assignable -> ID .)
    /               reduce using rule 42 (assignable -> ID .)
    DOTADD          reduce using rule 42 (assignable -> ID .)
    DOTSUB          reduce using rule 42 (assignable -> ID .)
    DOTMUL          reduce using rule 42 (assignable -> ID .)
    DOTDIV          reduce using rule 42 (assignable -> ID .)
    <               reduce using rule 42 (assignable -> ID .)
    >               reduce using rule 42 (assignable -> ID .)
    LE              reduce using rule 42 (assignable -> ID .)
    GE              reduce using rule 42 (assignable -> ID .)
    NE              reduce using rule 42 (assignable -> ID .)
    EQ              reduce using rule 42 (assignable -> ID .)
    '               reduce using rule 42 (assignable -> ID .)
    )               reduce using rule 42 (assignable -> ID .)
    ,               reduce using rule 42 (assignable -> ID .)
    ]               reduce using rule 42 (assignable -> ID .)
    :               reduce using rule 42 (assignable -> ID .)
    {               reduce using rule 42 (assignable -> ID .)
    BREAK           reduce using rule 42 (assignable -> ID .)
    CONTINUE        reduce using rule 42 (assignable -> ID .)
    INTNUM          reduce using rule 42 (assignable -> ID .)
    FLOATNUM        reduce using rule 42 (assignable -> ID .)
    (               reduce using rule 42 (assignable -> ID .)
    IF              reduce using rule 42 (assignable -> ID .)
    PRINT           reduce using rule 42 (assignable -> ID .)
    RETURN          reduce using rule 42 (assignable -> ID .)
    EYE             reduce using rule 42 (assignable -> ID .)
    ZEROS           reduce using rule 42 (assignable -> ID .)
    ONES            reduce using rule 42 (assignable -> ID .)
    ID              reduce using rule 42 (assignable -> ID .)
    FOR             reduce using rule 42 (assignable -> ID .)
    WHILE           reduce using rule 42 (assignable -> ID .)
    [               shift and go to state 73

  ! [               [ reduce using rule 42 (assignable -> ID .) ]


state 30

    (55) for_loop -> FOR . ID = range instruction

    ID              shift and go to state 74


state 31

    (56) while_loop -> WHILE . ( expr ) instruction

    (               shift and go to state 75


state 32

    (4) instructions -> instructions instruction .

    {               reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    [               reduce using rule 4 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 4 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 4 (instructions -> instructions instruction .)
    (               reduce using rule 4 (instructions -> instructions instruction .)
    -               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    EYE             reduce using rule 4 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 4 (instructions -> instructions instruction .)
    ONES            reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 33

    (6) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    }               shift and go to state 76
    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    instruction                    shift and go to state 32
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 34

    (7) instruction -> expr ; .

    {               reduce using rule 7 (instruction -> expr ; .)
    BREAK           reduce using rule 7 (instruction -> expr ; .)
    CONTINUE        reduce using rule 7 (instruction -> expr ; .)
    [               reduce using rule 7 (instruction -> expr ; .)
    INTNUM          reduce using rule 7 (instruction -> expr ; .)
    FLOATNUM        reduce using rule 7 (instruction -> expr ; .)
    (               reduce using rule 7 (instruction -> expr ; .)
    -               reduce using rule 7 (instruction -> expr ; .)
    IF              reduce using rule 7 (instruction -> expr ; .)
    PRINT           reduce using rule 7 (instruction -> expr ; .)
    RETURN          reduce using rule 7 (instruction -> expr ; .)
    EYE             reduce using rule 7 (instruction -> expr ; .)
    ZEROS           reduce using rule 7 (instruction -> expr ; .)
    ONES            reduce using rule 7 (instruction -> expr ; .)
    ID              reduce using rule 7 (instruction -> expr ; .)
    FOR             reduce using rule 7 (instruction -> expr ; .)
    WHILE           reduce using rule 7 (instruction -> expr ; .)
    $end            reduce using rule 7 (instruction -> expr ; .)
    }               reduce using rule 7 (instruction -> expr ; .)
    ELSE            reduce using rule 7 (instruction -> expr ; .)


state 35

    (15) expr -> expr + . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 77
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 36

    (16) expr -> expr - . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 78
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 37

    (17) expr -> expr * . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 79
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 38

    (18) expr -> expr / . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 80
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 39

    (19) expr -> expr DOTADD . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 81
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 40

    (20) expr -> expr DOTSUB . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 82
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 41

    (21) expr -> expr DOTMUL . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 83
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 42

    (22) expr -> expr DOTDIV . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 84
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 43

    (23) expr -> expr < . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 85
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 44

    (24) expr -> expr > . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 86
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 45

    (25) expr -> expr LE . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 87
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 46

    (26) expr -> expr GE . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 88
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 47

    (27) expr -> expr NE . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 89
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 48

    (28) expr -> expr EQ . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 90
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 49

    (36) expr -> expr ' .

    ;               reduce using rule 36 (expr -> expr ' .)
    +               reduce using rule 36 (expr -> expr ' .)
    -               reduce using rule 36 (expr -> expr ' .)
    *               reduce using rule 36 (expr -> expr ' .)
    /               reduce using rule 36 (expr -> expr ' .)
    DOTADD          reduce using rule 36 (expr -> expr ' .)
    DOTSUB          reduce using rule 36 (expr -> expr ' .)
    DOTMUL          reduce using rule 36 (expr -> expr ' .)
    DOTDIV          reduce using rule 36 (expr -> expr ' .)
    <               reduce using rule 36 (expr -> expr ' .)
    >               reduce using rule 36 (expr -> expr ' .)
    LE              reduce using rule 36 (expr -> expr ' .)
    GE              reduce using rule 36 (expr -> expr ' .)
    NE              reduce using rule 36 (expr -> expr ' .)
    EQ              reduce using rule 36 (expr -> expr ' .)
    '               reduce using rule 36 (expr -> expr ' .)
    )               reduce using rule 36 (expr -> expr ' .)
    ,               reduce using rule 36 (expr -> expr ' .)
    ]               reduce using rule 36 (expr -> expr ' .)
    :               reduce using rule 36 (expr -> expr ' .)
    {               reduce using rule 36 (expr -> expr ' .)
    BREAK           reduce using rule 36 (expr -> expr ' .)
    CONTINUE        reduce using rule 36 (expr -> expr ' .)
    [               reduce using rule 36 (expr -> expr ' .)
    INTNUM          reduce using rule 36 (expr -> expr ' .)
    FLOATNUM        reduce using rule 36 (expr -> expr ' .)
    (               reduce using rule 36 (expr -> expr ' .)
    IF              reduce using rule 36 (expr -> expr ' .)
    PRINT           reduce using rule 36 (expr -> expr ' .)
    RETURN          reduce using rule 36 (expr -> expr ' .)
    EYE             reduce using rule 36 (expr -> expr ' .)
    ZEROS           reduce using rule 36 (expr -> expr ' .)
    ONES            reduce using rule 36 (expr -> expr ' .)
    ID              reduce using rule 36 (expr -> expr ' .)
    FOR             reduce using rule 36 (expr -> expr ' .)
    WHILE           reduce using rule 36 (expr -> expr ' .)


state 50

    (8) instruction -> assignment_statement ; .

    {               reduce using rule 8 (instruction -> assignment_statement ; .)
    BREAK           reduce using rule 8 (instruction -> assignment_statement ; .)
    CONTINUE        reduce using rule 8 (instruction -> assignment_statement ; .)
    [               reduce using rule 8 (instruction -> assignment_statement ; .)
    INTNUM          reduce using rule 8 (instruction -> assignment_statement ; .)
    FLOATNUM        reduce using rule 8 (instruction -> assignment_statement ; .)
    (               reduce using rule 8 (instruction -> assignment_statement ; .)
    -               reduce using rule 8 (instruction -> assignment_statement ; .)
    IF              reduce using rule 8 (instruction -> assignment_statement ; .)
    PRINT           reduce using rule 8 (instruction -> assignment_statement ; .)
    RETURN          reduce using rule 8 (instruction -> assignment_statement ; .)
    EYE             reduce using rule 8 (instruction -> assignment_statement ; .)
    ZEROS           reduce using rule 8 (instruction -> assignment_statement ; .)
    ONES            reduce using rule 8 (instruction -> assignment_statement ; .)
    ID              reduce using rule 8 (instruction -> assignment_statement ; .)
    FOR             reduce using rule 8 (instruction -> assignment_statement ; .)
    WHILE           reduce using rule 8 (instruction -> assignment_statement ; .)
    $end            reduce using rule 8 (instruction -> assignment_statement ; .)
    }               reduce using rule 8 (instruction -> assignment_statement ; .)
    ELSE            reduce using rule 8 (instruction -> assignment_statement ; .)


state 51

    (11) instruction -> BREAK ; .

    {               reduce using rule 11 (instruction -> BREAK ; .)
    BREAK           reduce using rule 11 (instruction -> BREAK ; .)
    CONTINUE        reduce using rule 11 (instruction -> BREAK ; .)
    [               reduce using rule 11 (instruction -> BREAK ; .)
    INTNUM          reduce using rule 11 (instruction -> BREAK ; .)
    FLOATNUM        reduce using rule 11 (instruction -> BREAK ; .)
    (               reduce using rule 11 (instruction -> BREAK ; .)
    -               reduce using rule 11 (instruction -> BREAK ; .)
    IF              reduce using rule 11 (instruction -> BREAK ; .)
    PRINT           reduce using rule 11 (instruction -> BREAK ; .)
    RETURN          reduce using rule 11 (instruction -> BREAK ; .)
    EYE             reduce using rule 11 (instruction -> BREAK ; .)
    ZEROS           reduce using rule 11 (instruction -> BREAK ; .)
    ONES            reduce using rule 11 (instruction -> BREAK ; .)
    ID              reduce using rule 11 (instruction -> BREAK ; .)
    FOR             reduce using rule 11 (instruction -> BREAK ; .)
    WHILE           reduce using rule 11 (instruction -> BREAK ; .)
    $end            reduce using rule 11 (instruction -> BREAK ; .)
    }               reduce using rule 11 (instruction -> BREAK ; .)
    ELSE            reduce using rule 11 (instruction -> BREAK ; .)


state 52

    (12) instruction -> CONTINUE ; .

    {               reduce using rule 12 (instruction -> CONTINUE ; .)
    BREAK           reduce using rule 12 (instruction -> CONTINUE ; .)
    CONTINUE        reduce using rule 12 (instruction -> CONTINUE ; .)
    [               reduce using rule 12 (instruction -> CONTINUE ; .)
    INTNUM          reduce using rule 12 (instruction -> CONTINUE ; .)
    FLOATNUM        reduce using rule 12 (instruction -> CONTINUE ; .)
    (               reduce using rule 12 (instruction -> CONTINUE ; .)
    -               reduce using rule 12 (instruction -> CONTINUE ; .)
    IF              reduce using rule 12 (instruction -> CONTINUE ; .)
    PRINT           reduce using rule 12 (instruction -> CONTINUE ; .)
    RETURN          reduce using rule 12 (instruction -> CONTINUE ; .)
    EYE             reduce using rule 12 (instruction -> CONTINUE ; .)
    ZEROS           reduce using rule 12 (instruction -> CONTINUE ; .)
    ONES            reduce using rule 12 (instruction -> CONTINUE ; .)
    ID              reduce using rule 12 (instruction -> CONTINUE ; .)
    FOR             reduce using rule 12 (instruction -> CONTINUE ; .)
    WHILE           reduce using rule 12 (instruction -> CONTINUE ; .)
    $end            reduce using rule 12 (instruction -> CONTINUE ; .)
    }               reduce using rule 12 (instruction -> CONTINUE ; .)
    ELSE            reduce using rule 12 (instruction -> CONTINUE ; .)


state 53

    (13) instruction -> print_statement ; .

    {               reduce using rule 13 (instruction -> print_statement ; .)
    BREAK           reduce using rule 13 (instruction -> print_statement ; .)
    CONTINUE        reduce using rule 13 (instruction -> print_statement ; .)
    [               reduce using rule 13 (instruction -> print_statement ; .)
    INTNUM          reduce using rule 13 (instruction -> print_statement ; .)
    FLOATNUM        reduce using rule 13 (instruction -> print_statement ; .)
    (               reduce using rule 13 (instruction -> print_statement ; .)
    -               reduce using rule 13 (instruction -> print_statement ; .)
    IF              reduce using rule 13 (instruction -> print_statement ; .)
    PRINT           reduce using rule 13 (instruction -> print_statement ; .)
    RETURN          reduce using rule 13 (instruction -> print_statement ; .)
    EYE             reduce using rule 13 (instruction -> print_statement ; .)
    ZEROS           reduce using rule 13 (instruction -> print_statement ; .)
    ONES            reduce using rule 13 (instruction -> print_statement ; .)
    ID              reduce using rule 13 (instruction -> print_statement ; .)
    FOR             reduce using rule 13 (instruction -> print_statement ; .)
    WHILE           reduce using rule 13 (instruction -> print_statement ; .)
    $end            reduce using rule 13 (instruction -> print_statement ; .)
    }               reduce using rule 13 (instruction -> print_statement ; .)
    ELSE            reduce using rule 13 (instruction -> print_statement ; .)


state 54

    (14) instruction -> return_statement ; .

    {               reduce using rule 14 (instruction -> return_statement ; .)
    BREAK           reduce using rule 14 (instruction -> return_statement ; .)
    CONTINUE        reduce using rule 14 (instruction -> return_statement ; .)
    [               reduce using rule 14 (instruction -> return_statement ; .)
    INTNUM          reduce using rule 14 (instruction -> return_statement ; .)
    FLOATNUM        reduce using rule 14 (instruction -> return_statement ; .)
    (               reduce using rule 14 (instruction -> return_statement ; .)
    -               reduce using rule 14 (instruction -> return_statement ; .)
    IF              reduce using rule 14 (instruction -> return_statement ; .)
    PRINT           reduce using rule 14 (instruction -> return_statement ; .)
    RETURN          reduce using rule 14 (instruction -> return_statement ; .)
    EYE             reduce using rule 14 (instruction -> return_statement ; .)
    ZEROS           reduce using rule 14 (instruction -> return_statement ; .)
    ONES            reduce using rule 14 (instruction -> return_statement ; .)
    ID              reduce using rule 14 (instruction -> return_statement ; .)
    FOR             reduce using rule 14 (instruction -> return_statement ; .)
    WHILE           reduce using rule 14 (instruction -> return_statement ; .)
    $end            reduce using rule 14 (instruction -> return_statement ; .)
    }               reduce using rule 14 (instruction -> return_statement ; .)
    ELSE            reduce using rule 14 (instruction -> return_statement ; .)


state 55

    (35) expr -> - expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 35 (expr -> - expr .)
    +               reduce using rule 35 (expr -> - expr .)
    -               reduce using rule 35 (expr -> - expr .)
    *               reduce using rule 35 (expr -> - expr .)
    /               reduce using rule 35 (expr -> - expr .)
    DOTADD          reduce using rule 35 (expr -> - expr .)
    DOTSUB          reduce using rule 35 (expr -> - expr .)
    DOTMUL          reduce using rule 35 (expr -> - expr .)
    DOTDIV          reduce using rule 35 (expr -> - expr .)
    <               reduce using rule 35 (expr -> - expr .)
    >               reduce using rule 35 (expr -> - expr .)
    LE              reduce using rule 35 (expr -> - expr .)
    GE              reduce using rule 35 (expr -> - expr .)
    NE              reduce using rule 35 (expr -> - expr .)
    EQ              reduce using rule 35 (expr -> - expr .)
    '               reduce using rule 35 (expr -> - expr .)
    )               reduce using rule 35 (expr -> - expr .)
    ,               reduce using rule 35 (expr -> - expr .)
    ]               reduce using rule 35 (expr -> - expr .)
    :               reduce using rule 35 (expr -> - expr .)
    {               reduce using rule 35 (expr -> - expr .)
    BREAK           reduce using rule 35 (expr -> - expr .)
    CONTINUE        reduce using rule 35 (expr -> - expr .)
    [               reduce using rule 35 (expr -> - expr .)
    INTNUM          reduce using rule 35 (expr -> - expr .)
    FLOATNUM        reduce using rule 35 (expr -> - expr .)
    (               reduce using rule 35 (expr -> - expr .)
    IF              reduce using rule 35 (expr -> - expr .)
    PRINT           reduce using rule 35 (expr -> - expr .)
    RETURN          reduce using rule 35 (expr -> - expr .)
    EYE             reduce using rule 35 (expr -> - expr .)
    ZEROS           reduce using rule 35 (expr -> - expr .)
    ONES            reduce using rule 35 (expr -> - expr .)
    ID              reduce using rule 35 (expr -> - expr .)
    FOR             reduce using rule 35 (expr -> - expr .)
    WHILE           reduce using rule 35 (expr -> - expr .)

  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! DOTMUL          [ shift and go to state 41 ]
  ! DOTDIV          [ shift and go to state 42 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]
  ! '               [ shift and go to state 49 ]


state 56

    (33) expr -> assignable .

    +               reduce using rule 33 (expr -> assignable .)
    -               reduce using rule 33 (expr -> assignable .)
    *               reduce using rule 33 (expr -> assignable .)
    /               reduce using rule 33 (expr -> assignable .)
    DOTADD          reduce using rule 33 (expr -> assignable .)
    DOTSUB          reduce using rule 33 (expr -> assignable .)
    DOTMUL          reduce using rule 33 (expr -> assignable .)
    DOTDIV          reduce using rule 33 (expr -> assignable .)
    <               reduce using rule 33 (expr -> assignable .)
    >               reduce using rule 33 (expr -> assignable .)
    LE              reduce using rule 33 (expr -> assignable .)
    GE              reduce using rule 33 (expr -> assignable .)
    NE              reduce using rule 33 (expr -> assignable .)
    EQ              reduce using rule 33 (expr -> assignable .)
    '               reduce using rule 33 (expr -> assignable .)
    ;               reduce using rule 33 (expr -> assignable .)
    )               reduce using rule 33 (expr -> assignable .)
    ,               reduce using rule 33 (expr -> assignable .)
    ]               reduce using rule 33 (expr -> assignable .)
    :               reduce using rule 33 (expr -> assignable .)
    {               reduce using rule 33 (expr -> assignable .)
    BREAK           reduce using rule 33 (expr -> assignable .)
    CONTINUE        reduce using rule 33 (expr -> assignable .)
    [               reduce using rule 33 (expr -> assignable .)
    INTNUM          reduce using rule 33 (expr -> assignable .)
    FLOATNUM        reduce using rule 33 (expr -> assignable .)
    (               reduce using rule 33 (expr -> assignable .)
    IF              reduce using rule 33 (expr -> assignable .)
    PRINT           reduce using rule 33 (expr -> assignable .)
    RETURN          reduce using rule 33 (expr -> assignable .)
    EYE             reduce using rule 33 (expr -> assignable .)
    ZEROS           reduce using rule 33 (expr -> assignable .)
    ONES            reduce using rule 33 (expr -> assignable .)
    ID              reduce using rule 33 (expr -> assignable .)
    FOR             reduce using rule 33 (expr -> assignable .)
    WHILE           reduce using rule 33 (expr -> assignable .)


state 57

    (44) matrix_init -> [ . vector ]
    (46) vector -> . expr
    (47) vector -> . vector , expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    vector                         shift and go to state 91
    expr                           shift and go to state 92
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 58

    (29) expr -> [ matrix_init . ]
    (45) matrix_init -> matrix_init . , [ vector ]

    ]               shift and go to state 93
    ,               shift and go to state 94


state 59

    (30) expr -> matrix_init_name ( . expr )
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    matrix_init_name               shift and go to state 16
    expr                           shift and go to state 95
    assignable                     shift and go to state 56

state 60

    (34) expr -> ( expr . )
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    )               shift and go to state 96
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 61

    (37) assignment_statement -> assignable = . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    assignable                     shift and go to state 56
    expr                           shift and go to state 97
    matrix_init_name               shift and go to state 16

state 62

    (38) assignment_statement -> assignable ADDASSIGN . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    assignable                     shift and go to state 56
    expr                           shift and go to state 98
    matrix_init_name               shift and go to state 16

state 63

    (39) assignment_statement -> assignable SUBASSIGN . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    assignable                     shift and go to state 56
    expr                           shift and go to state 99
    matrix_init_name               shift and go to state 16

state 64

    (40) assignment_statement -> assignable MULASSIGN . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    assignable                     shift and go to state 56
    expr                           shift and go to state 100
    matrix_init_name               shift and go to state 16

state 65

    (41) assignment_statement -> assignable DIVASSIGN . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    assignable                     shift and go to state 56
    expr                           shift and go to state 101
    matrix_init_name               shift and go to state 16

state 66

    (51) if_statement -> IF ( . expr ) instruction
    (52) if_statement -> IF ( . expr ) instruction ELSE instruction
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 102
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 67

    (58) print_statement -> PRINT printables .
    (60) printables -> printables . , printable

    ;               reduce using rule 58 (print_statement -> PRINT printables .)
    ,               shift and go to state 103


state 68

    (59) printables -> printable .

    ,               reduce using rule 59 (printables -> printable .)
    ;               reduce using rule 59 (printables -> printable .)


state 69

    (61) printable -> expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ,               reduce using rule 61 (printable -> expr .)
    ;               reduce using rule 61 (printable -> expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 70

    (62) printable -> STRING .

    ,               reduce using rule 62 (printable -> STRING .)
    ;               reduce using rule 62 (printable -> STRING .)


state 71

    (64) return_statement -> RETURN expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 64 (return_statement -> RETURN expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 72

    (65) return_statement -> RETURN STRING .

    ;               reduce using rule 65 (return_statement -> RETURN STRING .)


state 73

    (43) assignable -> ID [ . expr , expr ]
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 104
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 74

    (55) for_loop -> FOR ID . = range instruction

    =               shift and go to state 105


state 75

    (56) while_loop -> WHILE ( . expr ) instruction
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 106
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 76

    (6) instruction -> { instructions } .

    {               reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    [               reduce using rule 6 (instruction -> { instructions } .)
    INTNUM          reduce using rule 6 (instruction -> { instructions } .)
    FLOATNUM        reduce using rule 6 (instruction -> { instructions } .)
    (               reduce using rule 6 (instruction -> { instructions } .)
    -               reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    EYE             reduce using rule 6 (instruction -> { instructions } .)
    ZEROS           reduce using rule 6 (instruction -> { instructions } .)
    ONES            reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 77

    (15) expr -> expr + expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 15 (expr -> expr + expr .)
    +               reduce using rule 15 (expr -> expr + expr .)
    -               reduce using rule 15 (expr -> expr + expr .)
    <               reduce using rule 15 (expr -> expr + expr .)
    >               reduce using rule 15 (expr -> expr + expr .)
    LE              reduce using rule 15 (expr -> expr + expr .)
    GE              reduce using rule 15 (expr -> expr + expr .)
    NE              reduce using rule 15 (expr -> expr + expr .)
    EQ              reduce using rule 15 (expr -> expr + expr .)
    )               reduce using rule 15 (expr -> expr + expr .)
    ,               reduce using rule 15 (expr -> expr + expr .)
    ]               reduce using rule 15 (expr -> expr + expr .)
    :               reduce using rule 15 (expr -> expr + expr .)
    {               reduce using rule 15 (expr -> expr + expr .)
    BREAK           reduce using rule 15 (expr -> expr + expr .)
    CONTINUE        reduce using rule 15 (expr -> expr + expr .)
    [               reduce using rule 15 (expr -> expr + expr .)
    INTNUM          reduce using rule 15 (expr -> expr + expr .)
    FLOATNUM        reduce using rule 15 (expr -> expr + expr .)
    (               reduce using rule 15 (expr -> expr + expr .)
    IF              reduce using rule 15 (expr -> expr + expr .)
    PRINT           reduce using rule 15 (expr -> expr + expr .)
    RETURN          reduce using rule 15 (expr -> expr + expr .)
    EYE             reduce using rule 15 (expr -> expr + expr .)
    ZEROS           reduce using rule 15 (expr -> expr + expr .)
    ONES            reduce using rule 15 (expr -> expr + expr .)
    ID              reduce using rule 15 (expr -> expr + expr .)
    FOR             reduce using rule 15 (expr -> expr + expr .)
    WHILE           reduce using rule 15 (expr -> expr + expr .)
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! *               [ reduce using rule 15 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 15 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 15 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 15 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 15 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 15 (expr -> expr + expr .) ]
  ! '               [ reduce using rule 15 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 78

    (16) expr -> expr - expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 16 (expr -> expr - expr .)
    +               reduce using rule 16 (expr -> expr - expr .)
    -               reduce using rule 16 (expr -> expr - expr .)
    <               reduce using rule 16 (expr -> expr - expr .)
    >               reduce using rule 16 (expr -> expr - expr .)
    LE              reduce using rule 16 (expr -> expr - expr .)
    GE              reduce using rule 16 (expr -> expr - expr .)
    NE              reduce using rule 16 (expr -> expr - expr .)
    EQ              reduce using rule 16 (expr -> expr - expr .)
    )               reduce using rule 16 (expr -> expr - expr .)
    ,               reduce using rule 16 (expr -> expr - expr .)
    ]               reduce using rule 16 (expr -> expr - expr .)
    :               reduce using rule 16 (expr -> expr - expr .)
    {               reduce using rule 16 (expr -> expr - expr .)
    BREAK           reduce using rule 16 (expr -> expr - expr .)
    CONTINUE        reduce using rule 16 (expr -> expr - expr .)
    [               reduce using rule 16 (expr -> expr - expr .)
    INTNUM          reduce using rule 16 (expr -> expr - expr .)
    FLOATNUM        reduce using rule 16 (expr -> expr - expr .)
    (               reduce using rule 16 (expr -> expr - expr .)
    IF              reduce using rule 16 (expr -> expr - expr .)
    PRINT           reduce using rule 16 (expr -> expr - expr .)
    RETURN          reduce using rule 16 (expr -> expr - expr .)
    EYE             reduce using rule 16 (expr -> expr - expr .)
    ZEROS           reduce using rule 16 (expr -> expr - expr .)
    ONES            reduce using rule 16 (expr -> expr - expr .)
    ID              reduce using rule 16 (expr -> expr - expr .)
    FOR             reduce using rule 16 (expr -> expr - expr .)
    WHILE           reduce using rule 16 (expr -> expr - expr .)
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! *               [ reduce using rule 16 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 16 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 16 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 16 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 16 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 16 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 16 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 79

    (17) expr -> expr * expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 17 (expr -> expr * expr .)
    +               reduce using rule 17 (expr -> expr * expr .)
    -               reduce using rule 17 (expr -> expr * expr .)
    *               reduce using rule 17 (expr -> expr * expr .)
    /               reduce using rule 17 (expr -> expr * expr .)
    <               reduce using rule 17 (expr -> expr * expr .)
    >               reduce using rule 17 (expr -> expr * expr .)
    LE              reduce using rule 17 (expr -> expr * expr .)
    GE              reduce using rule 17 (expr -> expr * expr .)
    NE              reduce using rule 17 (expr -> expr * expr .)
    EQ              reduce using rule 17 (expr -> expr * expr .)
    )               reduce using rule 17 (expr -> expr * expr .)
    ,               reduce using rule 17 (expr -> expr * expr .)
    ]               reduce using rule 17 (expr -> expr * expr .)
    :               reduce using rule 17 (expr -> expr * expr .)
    {               reduce using rule 17 (expr -> expr * expr .)
    BREAK           reduce using rule 17 (expr -> expr * expr .)
    CONTINUE        reduce using rule 17 (expr -> expr * expr .)
    [               reduce using rule 17 (expr -> expr * expr .)
    INTNUM          reduce using rule 17 (expr -> expr * expr .)
    FLOATNUM        reduce using rule 17 (expr -> expr * expr .)
    (               reduce using rule 17 (expr -> expr * expr .)
    IF              reduce using rule 17 (expr -> expr * expr .)
    PRINT           reduce using rule 17 (expr -> expr * expr .)
    RETURN          reduce using rule 17 (expr -> expr * expr .)
    EYE             reduce using rule 17 (expr -> expr * expr .)
    ZEROS           reduce using rule 17 (expr -> expr * expr .)
    ONES            reduce using rule 17 (expr -> expr * expr .)
    ID              reduce using rule 17 (expr -> expr * expr .)
    FOR             reduce using rule 17 (expr -> expr * expr .)
    WHILE           reduce using rule 17 (expr -> expr * expr .)
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! DOTADD          [ reduce using rule 17 (expr -> expr * expr .) ]
  ! DOTSUB          [ reduce using rule 17 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 17 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 17 (expr -> expr * expr .) ]
  ! '               [ reduce using rule 17 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 80

    (18) expr -> expr / expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 18 (expr -> expr / expr .)
    +               reduce using rule 18 (expr -> expr / expr .)
    -               reduce using rule 18 (expr -> expr / expr .)
    *               reduce using rule 18 (expr -> expr / expr .)
    /               reduce using rule 18 (expr -> expr / expr .)
    <               reduce using rule 18 (expr -> expr / expr .)
    >               reduce using rule 18 (expr -> expr / expr .)
    LE              reduce using rule 18 (expr -> expr / expr .)
    GE              reduce using rule 18 (expr -> expr / expr .)
    NE              reduce using rule 18 (expr -> expr / expr .)
    EQ              reduce using rule 18 (expr -> expr / expr .)
    )               reduce using rule 18 (expr -> expr / expr .)
    ,               reduce using rule 18 (expr -> expr / expr .)
    ]               reduce using rule 18 (expr -> expr / expr .)
    :               reduce using rule 18 (expr -> expr / expr .)
    {               reduce using rule 18 (expr -> expr / expr .)
    BREAK           reduce using rule 18 (expr -> expr / expr .)
    CONTINUE        reduce using rule 18 (expr -> expr / expr .)
    [               reduce using rule 18 (expr -> expr / expr .)
    INTNUM          reduce using rule 18 (expr -> expr / expr .)
    FLOATNUM        reduce using rule 18 (expr -> expr / expr .)
    (               reduce using rule 18 (expr -> expr / expr .)
    IF              reduce using rule 18 (expr -> expr / expr .)
    PRINT           reduce using rule 18 (expr -> expr / expr .)
    RETURN          reduce using rule 18 (expr -> expr / expr .)
    EYE             reduce using rule 18 (expr -> expr / expr .)
    ZEROS           reduce using rule 18 (expr -> expr / expr .)
    ONES            reduce using rule 18 (expr -> expr / expr .)
    ID              reduce using rule 18 (expr -> expr / expr .)
    FOR             reduce using rule 18 (expr -> expr / expr .)
    WHILE           reduce using rule 18 (expr -> expr / expr .)
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! DOTADD          [ reduce using rule 18 (expr -> expr / expr .) ]
  ! DOTSUB          [ reduce using rule 18 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 18 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 18 (expr -> expr / expr .) ]
  ! '               [ reduce using rule 18 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 81

    (19) expr -> expr DOTADD expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 19 (expr -> expr DOTADD expr .)
    +               reduce using rule 19 (expr -> expr DOTADD expr .)
    -               reduce using rule 19 (expr -> expr DOTADD expr .)
    *               reduce using rule 19 (expr -> expr DOTADD expr .)
    /               reduce using rule 19 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 19 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 19 (expr -> expr DOTADD expr .)
    <               reduce using rule 19 (expr -> expr DOTADD expr .)
    >               reduce using rule 19 (expr -> expr DOTADD expr .)
    LE              reduce using rule 19 (expr -> expr DOTADD expr .)
    GE              reduce using rule 19 (expr -> expr DOTADD expr .)
    NE              reduce using rule 19 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 19 (expr -> expr DOTADD expr .)
    )               reduce using rule 19 (expr -> expr DOTADD expr .)
    ,               reduce using rule 19 (expr -> expr DOTADD expr .)
    ]               reduce using rule 19 (expr -> expr DOTADD expr .)
    :               reduce using rule 19 (expr -> expr DOTADD expr .)
    {               reduce using rule 19 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 19 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 19 (expr -> expr DOTADD expr .)
    [               reduce using rule 19 (expr -> expr DOTADD expr .)
    INTNUM          reduce using rule 19 (expr -> expr DOTADD expr .)
    FLOATNUM        reduce using rule 19 (expr -> expr DOTADD expr .)
    (               reduce using rule 19 (expr -> expr DOTADD expr .)
    IF              reduce using rule 19 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 19 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 19 (expr -> expr DOTADD expr .)
    EYE             reduce using rule 19 (expr -> expr DOTADD expr .)
    ZEROS           reduce using rule 19 (expr -> expr DOTADD expr .)
    ONES            reduce using rule 19 (expr -> expr DOTADD expr .)
    ID              reduce using rule 19 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 19 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 19 (expr -> expr DOTADD expr .)
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! DOTMUL          [ reduce using rule 19 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 19 (expr -> expr DOTADD expr .) ]
  ! '               [ reduce using rule 19 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 82

    (20) expr -> expr DOTSUB expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 20 (expr -> expr DOTSUB expr .)
    +               reduce using rule 20 (expr -> expr DOTSUB expr .)
    -               reduce using rule 20 (expr -> expr DOTSUB expr .)
    *               reduce using rule 20 (expr -> expr DOTSUB expr .)
    /               reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 20 (expr -> expr DOTSUB expr .)
    <               reduce using rule 20 (expr -> expr DOTSUB expr .)
    >               reduce using rule 20 (expr -> expr DOTSUB expr .)
    LE              reduce using rule 20 (expr -> expr DOTSUB expr .)
    GE              reduce using rule 20 (expr -> expr DOTSUB expr .)
    NE              reduce using rule 20 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 20 (expr -> expr DOTSUB expr .)
    )               reduce using rule 20 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 20 (expr -> expr DOTSUB expr .)
    ]               reduce using rule 20 (expr -> expr DOTSUB expr .)
    :               reduce using rule 20 (expr -> expr DOTSUB expr .)
    {               reduce using rule 20 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 20 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 20 (expr -> expr DOTSUB expr .)
    [               reduce using rule 20 (expr -> expr DOTSUB expr .)
    INTNUM          reduce using rule 20 (expr -> expr DOTSUB expr .)
    FLOATNUM        reduce using rule 20 (expr -> expr DOTSUB expr .)
    (               reduce using rule 20 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 20 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 20 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 20 (expr -> expr DOTSUB expr .)
    EYE             reduce using rule 20 (expr -> expr DOTSUB expr .)
    ZEROS           reduce using rule 20 (expr -> expr DOTSUB expr .)
    ONES            reduce using rule 20 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 20 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 20 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 20 (expr -> expr DOTSUB expr .)
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! DOTMUL          [ reduce using rule 20 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 20 (expr -> expr DOTSUB expr .) ]
  ! '               [ reduce using rule 20 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 83

    (21) expr -> expr DOTMUL expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 21 (expr -> expr DOTMUL expr .)
    +               reduce using rule 21 (expr -> expr DOTMUL expr .)
    -               reduce using rule 21 (expr -> expr DOTMUL expr .)
    *               reduce using rule 21 (expr -> expr DOTMUL expr .)
    /               reduce using rule 21 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 21 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 21 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 21 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 21 (expr -> expr DOTMUL expr .)
    <               reduce using rule 21 (expr -> expr DOTMUL expr .)
    >               reduce using rule 21 (expr -> expr DOTMUL expr .)
    LE              reduce using rule 21 (expr -> expr DOTMUL expr .)
    GE              reduce using rule 21 (expr -> expr DOTMUL expr .)
    NE              reduce using rule 21 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 21 (expr -> expr DOTMUL expr .)
    )               reduce using rule 21 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 21 (expr -> expr DOTMUL expr .)
    ]               reduce using rule 21 (expr -> expr DOTMUL expr .)
    :               reduce using rule 21 (expr -> expr DOTMUL expr .)
    {               reduce using rule 21 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 21 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 21 (expr -> expr DOTMUL expr .)
    [               reduce using rule 21 (expr -> expr DOTMUL expr .)
    INTNUM          reduce using rule 21 (expr -> expr DOTMUL expr .)
    FLOATNUM        reduce using rule 21 (expr -> expr DOTMUL expr .)
    (               reduce using rule 21 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 21 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 21 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 21 (expr -> expr DOTMUL expr .)
    EYE             reduce using rule 21 (expr -> expr DOTMUL expr .)
    ZEROS           reduce using rule 21 (expr -> expr DOTMUL expr .)
    ONES            reduce using rule 21 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 21 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 21 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 21 (expr -> expr DOTMUL expr .)
    '               shift and go to state 49

  ! '               [ reduce using rule 21 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! DOTMUL          [ shift and go to state 41 ]
  ! DOTDIV          [ shift and go to state 42 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 84

    (22) expr -> expr DOTDIV expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 22 (expr -> expr DOTDIV expr .)
    +               reduce using rule 22 (expr -> expr DOTDIV expr .)
    -               reduce using rule 22 (expr -> expr DOTDIV expr .)
    *               reduce using rule 22 (expr -> expr DOTDIV expr .)
    /               reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 22 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 22 (expr -> expr DOTDIV expr .)
    <               reduce using rule 22 (expr -> expr DOTDIV expr .)
    >               reduce using rule 22 (expr -> expr DOTDIV expr .)
    LE              reduce using rule 22 (expr -> expr DOTDIV expr .)
    GE              reduce using rule 22 (expr -> expr DOTDIV expr .)
    NE              reduce using rule 22 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 22 (expr -> expr DOTDIV expr .)
    )               reduce using rule 22 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 22 (expr -> expr DOTDIV expr .)
    ]               reduce using rule 22 (expr -> expr DOTDIV expr .)
    :               reduce using rule 22 (expr -> expr DOTDIV expr .)
    {               reduce using rule 22 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 22 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 22 (expr -> expr DOTDIV expr .)
    [               reduce using rule 22 (expr -> expr DOTDIV expr .)
    INTNUM          reduce using rule 22 (expr -> expr DOTDIV expr .)
    FLOATNUM        reduce using rule 22 (expr -> expr DOTDIV expr .)
    (               reduce using rule 22 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 22 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 22 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 22 (expr -> expr DOTDIV expr .)
    EYE             reduce using rule 22 (expr -> expr DOTDIV expr .)
    ZEROS           reduce using rule 22 (expr -> expr DOTDIV expr .)
    ONES            reduce using rule 22 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 22 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 22 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 22 (expr -> expr DOTDIV expr .)
    '               shift and go to state 49

  ! '               [ reduce using rule 22 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! DOTMUL          [ shift and go to state 41 ]
  ! DOTDIV          [ shift and go to state 42 ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 85

    (23) expr -> expr < expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 23 (expr -> expr < expr .)
    <               reduce using rule 23 (expr -> expr < expr .)
    >               reduce using rule 23 (expr -> expr < expr .)
    LE              reduce using rule 23 (expr -> expr < expr .)
    GE              reduce using rule 23 (expr -> expr < expr .)
    NE              reduce using rule 23 (expr -> expr < expr .)
    EQ              reduce using rule 23 (expr -> expr < expr .)
    )               reduce using rule 23 (expr -> expr < expr .)
    ,               reduce using rule 23 (expr -> expr < expr .)
    ]               reduce using rule 23 (expr -> expr < expr .)
    :               reduce using rule 23 (expr -> expr < expr .)
    {               reduce using rule 23 (expr -> expr < expr .)
    BREAK           reduce using rule 23 (expr -> expr < expr .)
    CONTINUE        reduce using rule 23 (expr -> expr < expr .)
    [               reduce using rule 23 (expr -> expr < expr .)
    INTNUM          reduce using rule 23 (expr -> expr < expr .)
    FLOATNUM        reduce using rule 23 (expr -> expr < expr .)
    (               reduce using rule 23 (expr -> expr < expr .)
    IF              reduce using rule 23 (expr -> expr < expr .)
    PRINT           reduce using rule 23 (expr -> expr < expr .)
    RETURN          reduce using rule 23 (expr -> expr < expr .)
    EYE             reduce using rule 23 (expr -> expr < expr .)
    ZEROS           reduce using rule 23 (expr -> expr < expr .)
    ONES            reduce using rule 23 (expr -> expr < expr .)
    ID              reduce using rule 23 (expr -> expr < expr .)
    FOR             reduce using rule 23 (expr -> expr < expr .)
    WHILE           reduce using rule 23 (expr -> expr < expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 23 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 23 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 23 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 23 (expr -> expr < expr .) ]
  ! DOTADD          [ reduce using rule 23 (expr -> expr < expr .) ]
  ! DOTSUB          [ reduce using rule 23 (expr -> expr < expr .) ]
  ! DOTMUL          [ reduce using rule 23 (expr -> expr < expr .) ]
  ! DOTDIV          [ reduce using rule 23 (expr -> expr < expr .) ]
  ! '               [ reduce using rule 23 (expr -> expr < expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 86

    (24) expr -> expr > expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 24 (expr -> expr > expr .)
    <               reduce using rule 24 (expr -> expr > expr .)
    >               reduce using rule 24 (expr -> expr > expr .)
    LE              reduce using rule 24 (expr -> expr > expr .)
    GE              reduce using rule 24 (expr -> expr > expr .)
    NE              reduce using rule 24 (expr -> expr > expr .)
    EQ              reduce using rule 24 (expr -> expr > expr .)
    )               reduce using rule 24 (expr -> expr > expr .)
    ,               reduce using rule 24 (expr -> expr > expr .)
    ]               reduce using rule 24 (expr -> expr > expr .)
    :               reduce using rule 24 (expr -> expr > expr .)
    {               reduce using rule 24 (expr -> expr > expr .)
    BREAK           reduce using rule 24 (expr -> expr > expr .)
    CONTINUE        reduce using rule 24 (expr -> expr > expr .)
    [               reduce using rule 24 (expr -> expr > expr .)
    INTNUM          reduce using rule 24 (expr -> expr > expr .)
    FLOATNUM        reduce using rule 24 (expr -> expr > expr .)
    (               reduce using rule 24 (expr -> expr > expr .)
    IF              reduce using rule 24 (expr -> expr > expr .)
    PRINT           reduce using rule 24 (expr -> expr > expr .)
    RETURN          reduce using rule 24 (expr -> expr > expr .)
    EYE             reduce using rule 24 (expr -> expr > expr .)
    ZEROS           reduce using rule 24 (expr -> expr > expr .)
    ONES            reduce using rule 24 (expr -> expr > expr .)
    ID              reduce using rule 24 (expr -> expr > expr .)
    FOR             reduce using rule 24 (expr -> expr > expr .)
    WHILE           reduce using rule 24 (expr -> expr > expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 24 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 24 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 24 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 24 (expr -> expr > expr .) ]
  ! DOTADD          [ reduce using rule 24 (expr -> expr > expr .) ]
  ! DOTSUB          [ reduce using rule 24 (expr -> expr > expr .) ]
  ! DOTMUL          [ reduce using rule 24 (expr -> expr > expr .) ]
  ! DOTDIV          [ reduce using rule 24 (expr -> expr > expr .) ]
  ! '               [ reduce using rule 24 (expr -> expr > expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 87

    (25) expr -> expr LE expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 25 (expr -> expr LE expr .)
    <               reduce using rule 25 (expr -> expr LE expr .)
    >               reduce using rule 25 (expr -> expr LE expr .)
    LE              reduce using rule 25 (expr -> expr LE expr .)
    GE              reduce using rule 25 (expr -> expr LE expr .)
    NE              reduce using rule 25 (expr -> expr LE expr .)
    EQ              reduce using rule 25 (expr -> expr LE expr .)
    )               reduce using rule 25 (expr -> expr LE expr .)
    ,               reduce using rule 25 (expr -> expr LE expr .)
    ]               reduce using rule 25 (expr -> expr LE expr .)
    :               reduce using rule 25 (expr -> expr LE expr .)
    {               reduce using rule 25 (expr -> expr LE expr .)
    BREAK           reduce using rule 25 (expr -> expr LE expr .)
    CONTINUE        reduce using rule 25 (expr -> expr LE expr .)
    [               reduce using rule 25 (expr -> expr LE expr .)
    INTNUM          reduce using rule 25 (expr -> expr LE expr .)
    FLOATNUM        reduce using rule 25 (expr -> expr LE expr .)
    (               reduce using rule 25 (expr -> expr LE expr .)
    IF              reduce using rule 25 (expr -> expr LE expr .)
    PRINT           reduce using rule 25 (expr -> expr LE expr .)
    RETURN          reduce using rule 25 (expr -> expr LE expr .)
    EYE             reduce using rule 25 (expr -> expr LE expr .)
    ZEROS           reduce using rule 25 (expr -> expr LE expr .)
    ONES            reduce using rule 25 (expr -> expr LE expr .)
    ID              reduce using rule 25 (expr -> expr LE expr .)
    FOR             reduce using rule 25 (expr -> expr LE expr .)
    WHILE           reduce using rule 25 (expr -> expr LE expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! -               [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! *               [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! /               [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! DOTADD          [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! DOTSUB          [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! DOTMUL          [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! DOTDIV          [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! '               [ reduce using rule 25 (expr -> expr LE expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 88

    (26) expr -> expr GE expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 26 (expr -> expr GE expr .)
    <               reduce using rule 26 (expr -> expr GE expr .)
    >               reduce using rule 26 (expr -> expr GE expr .)
    LE              reduce using rule 26 (expr -> expr GE expr .)
    GE              reduce using rule 26 (expr -> expr GE expr .)
    NE              reduce using rule 26 (expr -> expr GE expr .)
    EQ              reduce using rule 26 (expr -> expr GE expr .)
    )               reduce using rule 26 (expr -> expr GE expr .)
    ,               reduce using rule 26 (expr -> expr GE expr .)
    ]               reduce using rule 26 (expr -> expr GE expr .)
    :               reduce using rule 26 (expr -> expr GE expr .)
    {               reduce using rule 26 (expr -> expr GE expr .)
    BREAK           reduce using rule 26 (expr -> expr GE expr .)
    CONTINUE        reduce using rule 26 (expr -> expr GE expr .)
    [               reduce using rule 26 (expr -> expr GE expr .)
    INTNUM          reduce using rule 26 (expr -> expr GE expr .)
    FLOATNUM        reduce using rule 26 (expr -> expr GE expr .)
    (               reduce using rule 26 (expr -> expr GE expr .)
    IF              reduce using rule 26 (expr -> expr GE expr .)
    PRINT           reduce using rule 26 (expr -> expr GE expr .)
    RETURN          reduce using rule 26 (expr -> expr GE expr .)
    EYE             reduce using rule 26 (expr -> expr GE expr .)
    ZEROS           reduce using rule 26 (expr -> expr GE expr .)
    ONES            reduce using rule 26 (expr -> expr GE expr .)
    ID              reduce using rule 26 (expr -> expr GE expr .)
    FOR             reduce using rule 26 (expr -> expr GE expr .)
    WHILE           reduce using rule 26 (expr -> expr GE expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! -               [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! *               [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! /               [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! DOTADD          [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! DOTSUB          [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! DOTMUL          [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! DOTDIV          [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! '               [ reduce using rule 26 (expr -> expr GE expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 89

    (27) expr -> expr NE expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 27 (expr -> expr NE expr .)
    <               reduce using rule 27 (expr -> expr NE expr .)
    >               reduce using rule 27 (expr -> expr NE expr .)
    LE              reduce using rule 27 (expr -> expr NE expr .)
    GE              reduce using rule 27 (expr -> expr NE expr .)
    NE              reduce using rule 27 (expr -> expr NE expr .)
    EQ              reduce using rule 27 (expr -> expr NE expr .)
    )               reduce using rule 27 (expr -> expr NE expr .)
    ,               reduce using rule 27 (expr -> expr NE expr .)
    ]               reduce using rule 27 (expr -> expr NE expr .)
    :               reduce using rule 27 (expr -> expr NE expr .)
    {               reduce using rule 27 (expr -> expr NE expr .)
    BREAK           reduce using rule 27 (expr -> expr NE expr .)
    CONTINUE        reduce using rule 27 (expr -> expr NE expr .)
    [               reduce using rule 27 (expr -> expr NE expr .)
    INTNUM          reduce using rule 27 (expr -> expr NE expr .)
    FLOATNUM        reduce using rule 27 (expr -> expr NE expr .)
    (               reduce using rule 27 (expr -> expr NE expr .)
    IF              reduce using rule 27 (expr -> expr NE expr .)
    PRINT           reduce using rule 27 (expr -> expr NE expr .)
    RETURN          reduce using rule 27 (expr -> expr NE expr .)
    EYE             reduce using rule 27 (expr -> expr NE expr .)
    ZEROS           reduce using rule 27 (expr -> expr NE expr .)
    ONES            reduce using rule 27 (expr -> expr NE expr .)
    ID              reduce using rule 27 (expr -> expr NE expr .)
    FOR             reduce using rule 27 (expr -> expr NE expr .)
    WHILE           reduce using rule 27 (expr -> expr NE expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! -               [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! *               [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! /               [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DOTADD          [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DOTSUB          [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DOTMUL          [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! DOTDIV          [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! '               [ reduce using rule 27 (expr -> expr NE expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 90

    (28) expr -> expr EQ expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 28 (expr -> expr EQ expr .)
    <               reduce using rule 28 (expr -> expr EQ expr .)
    >               reduce using rule 28 (expr -> expr EQ expr .)
    LE              reduce using rule 28 (expr -> expr EQ expr .)
    GE              reduce using rule 28 (expr -> expr EQ expr .)
    NE              reduce using rule 28 (expr -> expr EQ expr .)
    EQ              reduce using rule 28 (expr -> expr EQ expr .)
    )               reduce using rule 28 (expr -> expr EQ expr .)
    ,               reduce using rule 28 (expr -> expr EQ expr .)
    ]               reduce using rule 28 (expr -> expr EQ expr .)
    :               reduce using rule 28 (expr -> expr EQ expr .)
    {               reduce using rule 28 (expr -> expr EQ expr .)
    BREAK           reduce using rule 28 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 28 (expr -> expr EQ expr .)
    [               reduce using rule 28 (expr -> expr EQ expr .)
    INTNUM          reduce using rule 28 (expr -> expr EQ expr .)
    FLOATNUM        reduce using rule 28 (expr -> expr EQ expr .)
    (               reduce using rule 28 (expr -> expr EQ expr .)
    IF              reduce using rule 28 (expr -> expr EQ expr .)
    PRINT           reduce using rule 28 (expr -> expr EQ expr .)
    RETURN          reduce using rule 28 (expr -> expr EQ expr .)
    EYE             reduce using rule 28 (expr -> expr EQ expr .)
    ZEROS           reduce using rule 28 (expr -> expr EQ expr .)
    ONES            reduce using rule 28 (expr -> expr EQ expr .)
    ID              reduce using rule 28 (expr -> expr EQ expr .)
    FOR             reduce using rule 28 (expr -> expr EQ expr .)
    WHILE           reduce using rule 28 (expr -> expr EQ expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 49

  ! +               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOTADD          [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOTSUB          [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! '               [ reduce using rule 28 (expr -> expr EQ expr .) ]
  ! <               [ shift and go to state 43 ]
  ! >               [ shift and go to state 44 ]
  ! LE              [ shift and go to state 45 ]
  ! GE              [ shift and go to state 46 ]
  ! NE              [ shift and go to state 47 ]
  ! EQ              [ shift and go to state 48 ]


state 91

    (44) matrix_init -> [ vector . ]
    (47) vector -> vector . , expr

    ]               shift and go to state 107
    ,               shift and go to state 108


state 92

    (46) vector -> expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ]               reduce using rule 46 (vector -> expr .)
    ,               reduce using rule 46 (vector -> expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 93

    (29) expr -> [ matrix_init ] .

    ;               reduce using rule 29 (expr -> [ matrix_init ] .)
    +               reduce using rule 29 (expr -> [ matrix_init ] .)
    -               reduce using rule 29 (expr -> [ matrix_init ] .)
    *               reduce using rule 29 (expr -> [ matrix_init ] .)
    /               reduce using rule 29 (expr -> [ matrix_init ] .)
    DOTADD          reduce using rule 29 (expr -> [ matrix_init ] .)
    DOTSUB          reduce using rule 29 (expr -> [ matrix_init ] .)
    DOTMUL          reduce using rule 29 (expr -> [ matrix_init ] .)
    DOTDIV          reduce using rule 29 (expr -> [ matrix_init ] .)
    <               reduce using rule 29 (expr -> [ matrix_init ] .)
    >               reduce using rule 29 (expr -> [ matrix_init ] .)
    LE              reduce using rule 29 (expr -> [ matrix_init ] .)
    GE              reduce using rule 29 (expr -> [ matrix_init ] .)
    NE              reduce using rule 29 (expr -> [ matrix_init ] .)
    EQ              reduce using rule 29 (expr -> [ matrix_init ] .)
    '               reduce using rule 29 (expr -> [ matrix_init ] .)
    )               reduce using rule 29 (expr -> [ matrix_init ] .)
    ,               reduce using rule 29 (expr -> [ matrix_init ] .)
    ]               reduce using rule 29 (expr -> [ matrix_init ] .)
    :               reduce using rule 29 (expr -> [ matrix_init ] .)
    {               reduce using rule 29 (expr -> [ matrix_init ] .)
    BREAK           reduce using rule 29 (expr -> [ matrix_init ] .)
    CONTINUE        reduce using rule 29 (expr -> [ matrix_init ] .)
    [               reduce using rule 29 (expr -> [ matrix_init ] .)
    INTNUM          reduce using rule 29 (expr -> [ matrix_init ] .)
    FLOATNUM        reduce using rule 29 (expr -> [ matrix_init ] .)
    (               reduce using rule 29 (expr -> [ matrix_init ] .)
    IF              reduce using rule 29 (expr -> [ matrix_init ] .)
    PRINT           reduce using rule 29 (expr -> [ matrix_init ] .)
    RETURN          reduce using rule 29 (expr -> [ matrix_init ] .)
    EYE             reduce using rule 29 (expr -> [ matrix_init ] .)
    ZEROS           reduce using rule 29 (expr -> [ matrix_init ] .)
    ONES            reduce using rule 29 (expr -> [ matrix_init ] .)
    ID              reduce using rule 29 (expr -> [ matrix_init ] .)
    FOR             reduce using rule 29 (expr -> [ matrix_init ] .)
    WHILE           reduce using rule 29 (expr -> [ matrix_init ] .)


state 94

    (45) matrix_init -> matrix_init , . [ vector ]

    [               shift and go to state 109


state 95

    (30) expr -> matrix_init_name ( expr . )
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    )               shift and go to state 110
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 96

    (34) expr -> ( expr ) .

    ;               reduce using rule 34 (expr -> ( expr ) .)
    +               reduce using rule 34 (expr -> ( expr ) .)
    -               reduce using rule 34 (expr -> ( expr ) .)
    *               reduce using rule 34 (expr -> ( expr ) .)
    /               reduce using rule 34 (expr -> ( expr ) .)
    DOTADD          reduce using rule 34 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 34 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 34 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 34 (expr -> ( expr ) .)
    <               reduce using rule 34 (expr -> ( expr ) .)
    >               reduce using rule 34 (expr -> ( expr ) .)
    LE              reduce using rule 34 (expr -> ( expr ) .)
    GE              reduce using rule 34 (expr -> ( expr ) .)
    NE              reduce using rule 34 (expr -> ( expr ) .)
    EQ              reduce using rule 34 (expr -> ( expr ) .)
    '               reduce using rule 34 (expr -> ( expr ) .)
    )               reduce using rule 34 (expr -> ( expr ) .)
    ,               reduce using rule 34 (expr -> ( expr ) .)
    ]               reduce using rule 34 (expr -> ( expr ) .)
    :               reduce using rule 34 (expr -> ( expr ) .)
    {               reduce using rule 34 (expr -> ( expr ) .)
    BREAK           reduce using rule 34 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 34 (expr -> ( expr ) .)
    [               reduce using rule 34 (expr -> ( expr ) .)
    INTNUM          reduce using rule 34 (expr -> ( expr ) .)
    FLOATNUM        reduce using rule 34 (expr -> ( expr ) .)
    (               reduce using rule 34 (expr -> ( expr ) .)
    IF              reduce using rule 34 (expr -> ( expr ) .)
    PRINT           reduce using rule 34 (expr -> ( expr ) .)
    RETURN          reduce using rule 34 (expr -> ( expr ) .)
    EYE             reduce using rule 34 (expr -> ( expr ) .)
    ZEROS           reduce using rule 34 (expr -> ( expr ) .)
    ONES            reduce using rule 34 (expr -> ( expr ) .)
    ID              reduce using rule 34 (expr -> ( expr ) .)
    FOR             reduce using rule 34 (expr -> ( expr ) .)
    WHILE           reduce using rule 34 (expr -> ( expr ) .)


state 97

    (37) assignment_statement -> assignable = expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 37 (assignment_statement -> assignable = expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 98

    (38) assignment_statement -> assignable ADDASSIGN expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 38 (assignment_statement -> assignable ADDASSIGN expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 99

    (39) assignment_statement -> assignable SUBASSIGN expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 39 (assignment_statement -> assignable SUBASSIGN expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 100

    (40) assignment_statement -> assignable MULASSIGN expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 40 (assignment_statement -> assignable MULASSIGN expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 101

    (41) assignment_statement -> assignable DIVASSIGN expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ;               reduce using rule 41 (assignment_statement -> assignable DIVASSIGN expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 102

    (51) if_statement -> IF ( expr . ) instruction
    (52) if_statement -> IF ( expr . ) instruction ELSE instruction
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    )               shift and go to state 111
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 103

    (60) printables -> printables , . printable
    (61) printable -> . expr
    (62) printable -> . STRING
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    STRING          shift and go to state 70
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    printable                      shift and go to state 112
    expr                           shift and go to state 69
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 104

    (43) assignable -> ID [ expr . , expr ]
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ,               shift and go to state 113
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 105

    (55) for_loop -> FOR ID = . range instruction
    (57) range -> . expr : expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    range                          shift and go to state 114
    expr                           shift and go to state 115
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 106

    (56) while_loop -> WHILE ( expr . ) instruction
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    )               shift and go to state 116
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 107

    (44) matrix_init -> [ vector ] .

    ]               reduce using rule 44 (matrix_init -> [ vector ] .)
    ,               reduce using rule 44 (matrix_init -> [ vector ] .)


state 108

    (47) vector -> vector , . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 117
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 109

    (45) matrix_init -> matrix_init , [ . vector ]
    (46) vector -> . expr
    (47) vector -> . vector , expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    vector                         shift and go to state 118
    expr                           shift and go to state 92
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 110

    (30) expr -> matrix_init_name ( expr ) .

    ;               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    +               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    -               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    *               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    /               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    DOTADD          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    DOTSUB          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    DOTMUL          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    DOTDIV          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    <               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    >               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    LE              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    GE              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    NE              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    EQ              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    '               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    )               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    ,               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    ]               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    :               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    {               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    BREAK           reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    CONTINUE        reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    [               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    INTNUM          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    FLOATNUM        reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    (               reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    IF              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    PRINT           reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    RETURN          reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    EYE             reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    ZEROS           reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    ONES            reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    ID              reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    FOR             reduce using rule 30 (expr -> matrix_init_name ( expr ) .)
    WHILE           reduce using rule 30 (expr -> matrix_init_name ( expr ) .)


state 111

    (51) if_statement -> IF ( expr ) . instruction
    (52) if_statement -> IF ( expr ) . instruction ELSE instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    expr                           shift and go to state 6
    instruction                    shift and go to state 119
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 112

    (60) printables -> printables , printable .

    ,               reduce using rule 60 (printables -> printables , printable .)
    ;               reduce using rule 60 (printables -> printables , printable .)


state 113

    (43) assignable -> ID [ expr , . expr ]
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 120
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 114

    (55) for_loop -> FOR ID = range . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    instruction                    shift and go to state 121
    expr                           shift and go to state 6
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 115

    (57) range -> expr . : expr
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    :               shift and go to state 122
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 116

    (56) while_loop -> WHILE ( expr ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    expr                           shift and go to state 6
    instruction                    shift and go to state 123
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 117

    (47) vector -> vector , expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ]               reduce using rule 47 (vector -> vector , expr .)
    ,               reduce using rule 47 (vector -> vector , expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 118

    (45) matrix_init -> matrix_init , [ vector . ]
    (47) vector -> vector . , expr

    ]               shift and go to state 124
    ,               shift and go to state 108


state 119

    (51) if_statement -> IF ( expr ) instruction .
    (52) if_statement -> IF ( expr ) instruction . ELSE instruction

    {               reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    BREAK           reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    CONTINUE        reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    [               reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    INTNUM          reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    FLOATNUM        reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    (               reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    -               reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    IF              reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    PRINT           reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    RETURN          reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    EYE             reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    ZEROS           reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    ONES            reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    ID              reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    FOR             reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    WHILE           reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    $end            reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    }               reduce using rule 51 (if_statement -> IF ( expr ) instruction .)
    ELSE            shift and go to state 125

  ! ELSE            [ reduce using rule 51 (if_statement -> IF ( expr ) instruction .) ]


state 120

    (43) assignable -> ID [ expr , expr . ]
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

    ]               shift and go to state 126
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49


state 121

    (55) for_loop -> FOR ID = range instruction .

    {               reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    BREAK           reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    CONTINUE        reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    [               reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    INTNUM          reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    FLOATNUM        reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    (               reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    -               reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    IF              reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    PRINT           reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    RETURN          reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    EYE             reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    ZEROS           reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    ONES            reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    ID              reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    FOR             reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    WHILE           reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    $end            reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    }               reduce using rule 55 (for_loop -> FOR ID = range instruction .)
    ELSE            reduce using rule 55 (for_loop -> FOR ID = range instruction .)


state 122

    (57) range -> expr : . expr
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]

    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29

    expr                           shift and go to state 127
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 56

state 123

    (56) while_loop -> WHILE ( expr ) instruction .

    {               reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    BREAK           reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    CONTINUE        reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    [               reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    INTNUM          reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    FLOATNUM        reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    (               reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    -               reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    IF              reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    PRINT           reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    RETURN          reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    EYE             reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    ZEROS           reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    ONES            reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    ID              reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    FOR             reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    WHILE           reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    $end            reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    }               reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)
    ELSE            reduce using rule 56 (while_loop -> WHILE ( expr ) instruction .)


state 124

    (45) matrix_init -> matrix_init , [ vector ] .

    ]               reduce using rule 45 (matrix_init -> matrix_init , [ vector ] .)
    ,               reduce using rule 45 (matrix_init -> matrix_init , [ vector ] .)


state 125

    (52) if_statement -> IF ( expr ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . expr ;
    (8) instruction -> . assignment_statement ;
    (9) instruction -> . if_statement
    (10) instruction -> . loop
    (11) instruction -> . BREAK ;
    (12) instruction -> . CONTINUE ;
    (13) instruction -> . print_statement ;
    (14) instruction -> . return_statement ;
    (15) expr -> . expr + expr
    (16) expr -> . expr - expr
    (17) expr -> . expr * expr
    (18) expr -> . expr / expr
    (19) expr -> . expr DOTADD expr
    (20) expr -> . expr DOTSUB expr
    (21) expr -> . expr DOTMUL expr
    (22) expr -> . expr DOTDIV expr
    (23) expr -> . expr < expr
    (24) expr -> . expr > expr
    (25) expr -> . expr LE expr
    (26) expr -> . expr GE expr
    (27) expr -> . expr NE expr
    (28) expr -> . expr EQ expr
    (29) expr -> . [ matrix_init ]
    (30) expr -> . matrix_init_name ( expr )
    (31) expr -> . INTNUM
    (32) expr -> . FLOATNUM
    (33) expr -> . assignable
    (34) expr -> . ( expr )
    (35) expr -> . - expr
    (36) expr -> . expr '
    (37) assignment_statement -> . assignable = expr
    (38) assignment_statement -> . assignable ADDASSIGN expr
    (39) assignment_statement -> . assignable SUBASSIGN expr
    (40) assignment_statement -> . assignable MULASSIGN expr
    (41) assignment_statement -> . assignable DIVASSIGN expr
    (51) if_statement -> . IF ( expr ) instruction
    (52) if_statement -> . IF ( expr ) instruction ELSE instruction
    (53) loop -> . for_loop
    (54) loop -> . while_loop
    (58) print_statement -> . PRINT printables
    (63) return_statement -> . RETURN
    (64) return_statement -> . RETURN expr
    (65) return_statement -> . RETURN STRING
    (48) matrix_init_name -> . EYE
    (49) matrix_init_name -> . ZEROS
    (50) matrix_init_name -> . ONES
    (42) assignable -> . ID
    (43) assignable -> . ID [ expr , expr ]
    (55) for_loop -> . FOR ID = range instruction
    (56) while_loop -> . WHILE ( expr ) instruction

    {               shift and go to state 5
    BREAK           shift and go to state 10
    CONTINUE        shift and go to state 11
    [               shift and go to state 15
    INTNUM          shift and go to state 18
    FLOATNUM        shift and go to state 19
    (               shift and go to state 17
    -               shift and go to state 14
    IF              shift and go to state 21
    PRINT           shift and go to state 24
    RETURN          shift and go to state 25
    EYE             shift and go to state 26
    ZEROS           shift and go to state 27
    ONES            shift and go to state 28
    ID              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31

    expr                           shift and go to state 6
    instruction                    shift and go to state 128
    assignment_statement           shift and go to state 7
    if_statement                   shift and go to state 8
    loop                           shift and go to state 9
    print_statement                shift and go to state 12
    return_statement               shift and go to state 13
    matrix_init_name               shift and go to state 16
    assignable                     shift and go to state 20
    for_loop                       shift and go to state 22
    while_loop                     shift and go to state 23

state 126

    (43) assignable -> ID [ expr , expr ] .

    =               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ADDASSIGN       reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    SUBASSIGN       reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    MULASSIGN       reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    DIVASSIGN       reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ;               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    +               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    -               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    *               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    /               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    DOTADD          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    DOTSUB          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    DOTMUL          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    DOTDIV          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    <               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    >               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    LE              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    GE              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    NE              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    EQ              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    '               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    )               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ,               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ]               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    :               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    {               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    BREAK           reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    CONTINUE        reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    [               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    INTNUM          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    FLOATNUM        reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    (               reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    IF              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    PRINT           reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    RETURN          reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    EYE             reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ZEROS           reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ONES            reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    ID              reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    FOR             reduce using rule 43 (assignable -> ID [ expr , expr ] .)
    WHILE           reduce using rule 43 (assignable -> ID [ expr , expr ] .)


state 127

    (57) range -> expr : expr .
    (15) expr -> expr . + expr
    (16) expr -> expr . - expr
    (17) expr -> expr . * expr
    (18) expr -> expr . / expr
    (19) expr -> expr . DOTADD expr
    (20) expr -> expr . DOTSUB expr
    (21) expr -> expr . DOTMUL expr
    (22) expr -> expr . DOTDIV expr
    (23) expr -> expr . < expr
    (24) expr -> expr . > expr
    (25) expr -> expr . LE expr
    (26) expr -> expr . GE expr
    (27) expr -> expr . NE expr
    (28) expr -> expr . EQ expr
    (36) expr -> expr . '

  ! shift/reduce conflict for - resolved as shift
    {               reduce using rule 57 (range -> expr : expr .)
    BREAK           reduce using rule 57 (range -> expr : expr .)
    CONTINUE        reduce using rule 57 (range -> expr : expr .)
    [               reduce using rule 57 (range -> expr : expr .)
    INTNUM          reduce using rule 57 (range -> expr : expr .)
    FLOATNUM        reduce using rule 57 (range -> expr : expr .)
    (               reduce using rule 57 (range -> expr : expr .)
    IF              reduce using rule 57 (range -> expr : expr .)
    PRINT           reduce using rule 57 (range -> expr : expr .)
    RETURN          reduce using rule 57 (range -> expr : expr .)
    EYE             reduce using rule 57 (range -> expr : expr .)
    ZEROS           reduce using rule 57 (range -> expr : expr .)
    ONES            reduce using rule 57 (range -> expr : expr .)
    ID              reduce using rule 57 (range -> expr : expr .)
    FOR             reduce using rule 57 (range -> expr : expr .)
    WHILE           reduce using rule 57 (range -> expr : expr .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    <               shift and go to state 43
    >               shift and go to state 44
    LE              shift and go to state 45
    GE              shift and go to state 46
    NE              shift and go to state 47
    EQ              shift and go to state 48
    '               shift and go to state 49

  ! -               [ reduce using rule 57 (range -> expr : expr .) ]


state 128

    (52) if_statement -> IF ( expr ) instruction ELSE instruction .

    {               reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    BREAK           reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    [               reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    INTNUM          reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    (               reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    -               reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    IF              reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    PRINT           reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    RETURN          reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    EYE             reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    ZEROS           reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    ONES            reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    ID              reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    FOR             reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    WHILE           reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    $end            reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    }               reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)
    ELSE            reduce using rule 52 (if_statement -> IF ( expr ) instruction ELSE instruction .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for [ in state 29 resolved as shift
WARNING: shift/reduce conflict for - in state 127 resolved as shift
